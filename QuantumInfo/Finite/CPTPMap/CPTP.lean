import QuantumInfo.Finite.CPTPMap.Bundled
import QuantumInfo.Finite.Unitary

/-! # Completely Positive Trace Preserving maps

A `CPTPMap` is a `‚ÑÇ`-linear map between matrices (`MatrixMap` is an alias), bundled with the facts that it
`IsCompletelyPositive` and `IsTracePreserving`. CPTP maps are typically regarded as the "most general quantum
operation", as they map density matrices (`MState`s) to density matrices. The type `PTPMap`, for maps that are
positive (but not necessarily completely positive) is also declared.

A large portion of the theory is in terms of the Choi matrix (`MatrixMap.choi_matrix`), as the positive-definiteness
of this matrix corresponds to being a CP map. This is [Choi's theorem on CP maps](https://en.wikipedia.org/wiki/Choi%27s_theorem_on_completely_positive_maps).

This file also defines several important examples of, classes of, and operations on, CPTPMaps:
 * `compose`: Composition of maps
 * `id`: The identity map
 * `replacement`: The replacement channel that always outputs the same state
 * `prod`: Tensor product of two CPTP maps, with notation M‚ÇÅ ‚äó M‚ÇÇ
 * `piProd`: Tensor product of finitely many CPTP maps (Pi-type product)
 * `of_unitary`: The CPTP map corresponding to a unitary opeation `U`
 * `IsUnitary`: Predicate whether the map corresponds to any unitary
 * `purify`: Purifying a channel into a unitary on a larger Hilbert space
 * `complementary`: The complementary channel to its purification
 * `IsEntanglementBreaking`, `IsDegradable`, `IsAntidegradable`: Entanglement breaking, degradable and antidegradable channels.
 * `SWAP`, `assoc`, `assoc'`, `traceLeft`, `traceRight`: The CPTP maps corresponding to important operations on states. These correspond directly to `MState.SWAP`, `MState.assoc`, `MState.assoc'`, `MState.traceLeft`, and `MState.traceRight`.
-/

variable {dIn dOut dOut‚ÇÇ : Type*} [Fintype dIn] [Fintype dOut] [Fintype dOut‚ÇÇ]

namespace CPTPMap
noncomputable section
open scoped Matrix ComplexOrder

variable [DecidableEq dIn]

variable {dM : Type*} [Fintype dM] [DecidableEq dM]
variable {dM‚ÇÇ : Type*} [Fintype dM‚ÇÇ] [DecidableEq dM‚ÇÇ]
variable (Œõ : CPTPMap dIn dOut)

theorem mat_coe_eq_apply_mat [DecidableEq dOut] (œÅ : MState dIn) : (Œõ œÅ).m = Œõ.map œÅ.m :=
  rfl

@[ext]
theorem funext [DecidableEq dOut] {Œõ‚ÇÅ Œõ‚ÇÇ : CPTPMap dIn dOut} (h : ‚àÄ œÅ, Œõ‚ÇÅ œÅ = Œõ‚ÇÇ œÅ) : Œõ‚ÇÅ = Œõ‚ÇÇ :=
  DFunLike.ext _ _ h

/-- The composition of CPTPMaps, as a CPTPMap. -/
def compose (Œõ‚ÇÇ : CPTPMap dM dOut) (Œõ‚ÇÅ : CPTPMap dIn dM) : CPTPMap dIn dOut where
  toLinearMap := Œõ‚ÇÇ.map ‚àò‚Çó Œõ‚ÇÅ.map
  cp := Œõ‚ÇÅ.cp.comp Œõ‚ÇÇ.cp
  TP := Œõ‚ÇÅ.TP.comp Œõ‚ÇÇ.TP

infixl:75 "‚àò‚Çò" => CPTPMap.compose

/-- Composition of CPTPMaps by `CPTPMap.compose` is compatible with the `instFunLike` action. -/
@[simp]
theorem compose_eq [DecidableEq dOut] {Œõ‚ÇÅ : CPTPMap dIn dM} {Œõ‚ÇÇ : CPTPMap dM dOut} : ‚àÄœÅ, (Œõ‚ÇÇ ‚àò‚Çò Œõ‚ÇÅ) œÅ = Œõ‚ÇÇ (Œõ‚ÇÅ œÅ) :=
  fun _ ‚Ü¶ rfl

/-- Composition of CPTPMaps is associative. -/
theorem compose_assoc [DecidableEq dOut] (Œõ‚ÇÉ : CPTPMap dM‚ÇÇ dOut) (Œõ‚ÇÇ : CPTPMap dM dM‚ÇÇ)
    (Œõ‚ÇÅ : CPTPMap dIn dM) : (Œõ‚ÇÉ ‚àò‚Çò Œõ‚ÇÇ) ‚àò‚Çò Œõ‚ÇÅ = Œõ‚ÇÉ ‚àò‚Çò (Œõ‚ÇÇ ‚àò‚Çò Œõ‚ÇÅ) := by
  ext1 œÅ
  simp

/-- The identity channel, which leaves the input unchanged. -/
def id : CPTPMap dIn dIn where
  toLinearMap := .id
  cp := .id
  TP := .id

/-- The map `CPTPMap.id` leaves any matrix unchanged. -/
@[simp]
theorem id_map : (id (dIn := dIn)).map = LinearMap.id := by
  rfl

/-- The map `CPTPMap.id` leaves the input state unchanged. -/
@[simp]
theorem id_MState (œÅ : MState dIn) : CPTPMap.id (dIn := dIn) œÅ = œÅ := by
  apply MState.ext_m
  rw [mat_coe_eq_apply_mat]
  simp

/-- The map `CPTPMap.id` composed with any map is the same map. -/
@[simp]
theorem id_compose [DecidableEq dOut] (Œõ : CPTPMap dIn dOut) : id ‚àò‚Çò Œõ = Œõ := by
  apply funext
  simp

/-- Any map composed with `CPTPMap.id` is the same map. -/
@[simp]
theorem compose_id (Œõ : CPTPMap dIn dOut) : Œõ ‚àò‚Çò id = Œõ := by
  classical ext1
  simp

/-- Two CPTP maps into the same one-dimensional output space must be equal -/
theorem eq_if_output_unique [Unique dOut] (Œõ‚ÇÅ Œõ‚ÇÇ : CPTPMap dIn dOut) : Œõ‚ÇÅ = Œõ‚ÇÇ :=
  funext fun _ ‚Ü¶ (Unique.eq_default _).trans (Unique.eq_default _).symm

/-- A state can be viewed as a CPTP map from the trivial Hilbert space (indexed by `Unit`)
 that outputs exactly that state. -/
def const_state [Unique dIn] [DecidableEq dOut] (œÅ : MState dOut) : CPTPMap dIn dOut where
  toLinearMap := (MatrixMap.of_choi_matrix (.of fun (i,_) (j,_) ‚Ü¶ œÅ.m i j))
  cp := sorry
  TP x := by
    have h : ‚àë i : dOut, œÅ.m i i = 1 := œÅ.tr'
    simp [MatrixMap.of_choi_matrix, Matrix.trace, ‚Üê Finset.mul_sum, h]

/-- The output of `const_state œÅ` is always that `œÅ`. -/
@[simp]
theorem const_state_apply [Unique dIn] [DecidableEq dOut] (œÅ : MState dOut) (œÅ‚ÇÄ : MState dIn) :
    const_state œÅ œÅ‚ÇÄ = œÅ := by
  ext1
  dsimp [const_state, MatrixMap.of_choi_matrix, instMFunLike, PTPMap.instMFunLike, HPMap.instFunLike,
    HPMap.map]
  simp only [Finset.univ_unique, Finset.sum_singleton]
  rw [Unique.eq_default œÅ‚ÇÄ]
  -- convert one_mul _
  --Should be a simp theorem
  sorry

section prod
open Kronecker

variable {dI‚ÇÅ dI‚ÇÇ dO‚ÇÅ dO‚ÇÇ : Type*} [Fintype dI‚ÇÅ] [Fintype dI‚ÇÇ] [Fintype dO‚ÇÅ] [Fintype dO‚ÇÇ]
variable [DecidableEq dI‚ÇÅ] [DecidableEq dI‚ÇÇ] [DecidableEq dO‚ÇÅ] [DecidableEq dO‚ÇÇ]

set_option maxRecDepth 1000 in -- ??? what the heck is recursing
/-- The tensor product of two CPTPMaps. -/
def prod (Œõ‚ÇÅ : CPTPMap dI‚ÇÅ dO‚ÇÅ) (Œõ‚ÇÇ : CPTPMap dI‚ÇÇ dO‚ÇÇ) : CPTPMap (dI‚ÇÅ √ó dI‚ÇÇ) (dO‚ÇÅ √ó dO‚ÇÇ) where
  toLinearMap := Œõ‚ÇÅ.map.kron Œõ‚ÇÇ.map
  cp := Œõ‚ÇÅ.cp.kron Œõ‚ÇÇ.cp
  TP := Œõ‚ÇÅ.TP.kron Œõ‚ÇÇ.TP

infixl:70 "‚äó‚Çñ" => CPTPMap.prod

end prod

section finprod

variable {Œπ : Type u} [DecidableEq Œπ] [fŒπ : Fintype Œπ]
variable {dI : Œπ ‚Üí Type v} [‚àÄ(i :Œπ), Fintype (dI i)] [‚àÄ(i :Œπ), DecidableEq (dI i)]
variable {dO : Œπ ‚Üí Type w} [‚àÄ(i :Œπ), Fintype (dO i)] [‚àÄ(i :Œπ), DecidableEq (dO i)]

end finprod

section trace
variable {d‚ÇÅ d‚ÇÇ : Type*} [Fintype d‚ÇÅ] [Fintype d‚ÇÇ] [DecidableEq d‚ÇÅ] [DecidableEq d‚ÇÇ]

/-- Partial tracing out the left, as a CPTP map. -/
def traceLeft : CPTPMap (d‚ÇÅ √ó d‚ÇÇ) d‚ÇÇ where
  toLinearMap := sorry --should be `Matrix.traceLeft` but that's not a linear map.
  cp := sorry
  TP := sorry

/-- Partial tracing out the right, as a CPTP map. -/
def traceRight : CPTPMap (d‚ÇÅ √ó d‚ÇÇ) d‚ÇÅ :=
  sorry

@[simp]
theorem traceLeft_eq_MState_traceLeft (œÅ : MState (d‚ÇÅ √ó d‚ÇÇ)) :
    traceLeft (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) œÅ = œÅ.traceLeft :=
  sorry

@[simp]
theorem traceRight_eq_MState_traceRight (œÅ : MState (d‚ÇÅ √ó d‚ÇÇ)) :
    traceRight (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) œÅ = œÅ.traceRight :=
  sorry

end trace

section equiv
variable [DecidableEq dOut]

/-- Given a equivalence (a bijection) between the types d‚ÇÅ and d‚ÇÇ, that is, if they're
 the same dimension, then there's a CPTP channel for this. This is what we need for
 defining e.g. the SWAP channel, which is 'unitary' but takes heterogeneous input
 and outputs types (d‚ÇÅ √ó d‚ÇÇ) and (d‚ÇÇ √ó d‚ÇÅ). -/
def of_equiv (œÉ : dIn ‚âÉ dOut) : CPTPMap dIn dOut where
  toFun := Matrix.reindex œÉ œÉ
  map_add' := by simp [Matrix.submatrix_add]
  map_smul' := by simp [Matrix.submatrix_smul]
  cp := sorry
  TP x := by
    symm
    apply Fintype.sum_equiv œÉ
    simp

theorem equiv_inverse (œÉ : dIn ‚âÉ dOut)  : (of_equiv œÉ) ‚àò (of_equiv œÉ.symm) = id (dIn := dOut) :=
  sorry

variable {d‚ÇÅ d‚ÇÇ d‚ÇÉ : Type*} [Fintype d‚ÇÅ] [Fintype d‚ÇÇ] [Fintype d‚ÇÉ]
variable [DecidableEq d‚ÇÅ] [DecidableEq d‚ÇÇ] [DecidableEq d‚ÇÉ]

--TODO: of_equiv (id) = id
--(of_equiv œÉ).compose (of_equiv œÑ) = of_equiv (œÉ ‚àò œÑ)

/-- The SWAP operation, as a channel. -/
def SWAP : CPTPMap (d‚ÇÅ √ó d‚ÇÇ) (d‚ÇÇ √ó d‚ÇÅ) :=
  of_equiv (Equiv.prodComm d‚ÇÅ d‚ÇÇ)

/-- The associator, as a channel. -/
def assoc : CPTPMap ((d‚ÇÅ √ó d‚ÇÇ) √ó d‚ÇÉ) (d‚ÇÅ √ó d‚ÇÇ √ó d‚ÇÉ) :=
  of_equiv (Equiv.prodAssoc d‚ÇÅ d‚ÇÇ d‚ÇÉ)

/-- The inverse associator, as a channel. -/
def assoc' : CPTPMap (d‚ÇÅ √ó d‚ÇÇ √ó d‚ÇÉ) ((d‚ÇÅ √ó d‚ÇÇ) √ó d‚ÇÉ) :=
  of_equiv (Equiv.prodAssoc d‚ÇÅ d‚ÇÇ d‚ÇÉ).symm

@[simp]
theorem SWAP_eq_MState_SWAP (œÅ : MState (d‚ÇÅ √ó d‚ÇÇ)) : SWAP (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) œÅ = œÅ.SWAP :=
  sorry

@[simp]
theorem assoc_eq_MState_assoc (œÅ : MState ((d‚ÇÅ √ó d‚ÇÇ) √ó d‚ÇÉ)) : assoc (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) (d‚ÇÉ := d‚ÇÉ) œÅ = œÅ.assoc :=
  sorry

@[simp]
theorem assoc'_eq_MState_assoc' (œÅ : MState (d‚ÇÅ √ó d‚ÇÇ √ó d‚ÇÉ)) : assoc' (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) (d‚ÇÉ := d‚ÇÉ) œÅ = œÅ.assoc' :=
  sorry

@[simp]
theorem assoc_assoc' : (assoc (d‚ÇÅ := d‚ÇÅ) (d‚ÇÇ := d‚ÇÇ) (d‚ÇÉ := d‚ÇÉ)) ‚àò‚Çò assoc' = id := by
  ext1 œÅ
  simp

end equiv

section unitary

/-- Conjugating density matrices by a unitary as a channel. This is standard unitary evolution. -/
def of_unitary (U : ùêî[dIn]) : CPTPMap dIn dIn where
  toFun œÅ := U * œÅ * star U
  map_add' := by simp [mul_add, add_mul]
  map_smul' := by simp
  cp := sorry
  TP := by simp [Matrix.trace_mul_cycle, MatrixMap.IsTracePreserving]

/-- The unitary channel U conjugated by U. -/
theorem of_unitary_eq_conj (U : ùêî[dIn]) (œÅ : MState dIn) :
    (of_unitary U) œÅ = œÅ.U_conj U :=
  rfl

/-- A channel is unitary iff it is `of_unitary U`. -/
def IsUnitary (Œõ : CPTPMap dIn dIn) : Prop :=
  ‚àÉ U, Œõ = of_unitary U

/-- A channel is unitary iff it can be written as conjugation by a unitary. -/
theorem IsUnitary_iff_U_conj (Œõ : CPTPMap dIn dIn) : IsUnitary Œõ ‚Üî ‚àÉ U, ‚àÄ œÅ, Œõ œÅ = œÅ.U_conj U := by
  simp_rw [IsUnitary, ‚Üê of_unitary_eq_conj, CPTPMap.funext_iff]

theorem IsUnitary_equiv (œÉ : dIn ‚âÉ dIn) : IsUnitary (of_equiv œÉ) :=
  sorry

end unitary

-- /-- A channel is *entanglement breaking* iff its product with the identity channel
--   only outputs separable states. -/
-- def IsEntanglementBreaking (Œõ : CPTPMap dIn dOut) : Prop :=
--   ‚àÄ (dR : Type u_1) [Fintype dR] [DecidableEq dR],
--   ‚àÄ (œÅ : MState (dR √ó dIn)), ((CPTPMap.id (dIn := dR) ‚äó‚Çñ Œõ) œÅ).IsSeparable

--TODO:
--Theorem: entanglement breaking iff it holds for all channels, not just id.
--Theorem: entanglement break iff it breaks a Bell pair (Wilde Exercise 4.6.2)
--Theorem: entanglement break if c-q or q-c, e.g. measurements
--Theorem: eb iff Kraus operators can be written as all unit rank (Wilde Theorem 4.6.1)

section purify
variable [DecidableEq dOut] [Inhabited dOut]

/-- Every channel can be written as a unitary channel on a larger system. In general, if
 the original channel was A‚ÜíB, we may need to go as big as dilating the output system (the
 environment) by a factor of A*B. One way of stating this would be that it forms an
 isometry from A to (B√óA√óB). So that we can instead talk about the cleaner unitaries, we
 say that this is a unitary on (A√óB√óB). The defining properties that this is a valid
 purification comes are `purify_IsUnitary` and `purify_trace`. This means the environment
 always has type `dIn √ó dOut`.

 Furthermore, since we need a canonical "0" state on B in order to add with the input,
 we require a typeclass instance [Inhabited dOut]. -/
def purify (Œõ : CPTPMap dIn dOut) : CPTPMap (dIn √ó dOut √ó dOut) (dIn √ó dOut √ó dOut) where
  toLinearMap := sorry
  cp := sorry
  TP := sorry

--TODO: Constructing this will probably need Kraus operators first.

theorem purify_IsUnitary (Œõ : CPTPMap dIn dOut) : Œõ.purify.IsUnitary :=
  sorry

/-- With a channel Œõ : A ‚Üí B, a valid purification (A√óB√óB)‚Üí(A√óB√óB) is such that:
 * Preparing the default ‚à£0‚ü© state on two copies of B
 * Appending these to the input
 * Applying the purified unitary channel
 * Tracing out the two left parts of the output
is equivalent to the original channel. This theorem states that the channel output by `purify`
has this property. -/
theorem purify_trace (Œõ : CPTPMap dIn dOut) : Œõ = (
    let zero_prep : CPTPMap Unit (dOut √ó dOut) := const_state (MState.pure (Ket.basis default))
    let prep := (id ‚äó‚Çñ zero_prep)
    let append : CPTPMap dIn (dIn √ó Unit) := CPTPMap.of_equiv (Equiv.prodPUnit dIn).symm
    CPTPMap.traceLeft ‚àò‚Çò CPTPMap.traceLeft ‚àò‚Çò Œõ.purify ‚àò‚Çò prep ‚àò‚Çò append
  ) :=
  sorry

--TODO Theorem: `purify` is unique up to unitary equivalence.

--TODO: Best to rewrite the "zero_prep / prep / append" as one CPTPMap.append channel when we
-- define that.

/-- The complementary channel comes from tracing out the other half (the right half) of the purified channel `purify`. -/
def complementary (Œõ : CPTPMap dIn dOut) : CPTPMap dIn (dIn √ó dOut) :=
  let zero_prep : CPTPMap Unit (dOut √ó dOut) := const_state (MState.pure (Ket.basis default))
  let prep := (id ‚äó‚Çñ zero_prep)
  let append : CPTPMap dIn (dIn √ó Unit) := CPTPMap.of_equiv (Equiv.prodPUnit dIn).symm
  CPTPMap.traceRight ‚àò‚Çò CPTPMap.assoc' ‚àò‚Çò Œõ.purify ‚àò‚Çò prep ‚àò‚Çò append

end purify

section degradable
variable [DecidableEq dOut] [Inhabited dOut] [DecidableEq dOut‚ÇÇ] [Inhabited dOut‚ÇÇ]

/-- A channel is *degradable to* another, if the other can be written as a composition of
  a _degrading_ channel D with the original channel. -/
def IsDegradableTo (Œõ : CPTPMap dIn dOut) (Œõ‚ÇÇ : CPTPMap dIn dOut‚ÇÇ) : Prop :=
  ‚àÉ (D : CPTPMap dOut (dOut‚ÇÇ)), D ‚àò‚Çò Œõ = Œõ‚ÇÇ

/-- A channel is *antidegradable to* another, if the other `IsDegradableTo` this one. -/
@[reducible]
def IsAntidegradableTo (Œõ : CPTPMap dIn dOut) (Œõ‚ÇÇ : CPTPMap dIn dOut‚ÇÇ) : Prop :=
  IsDegradableTo Œõ‚ÇÇ Œõ

/-- A channel is *degradable* if it `IsDegradableTo` its complementary channel. -/
def IsDegradable (Œõ : CPTPMap dIn dOut) : Prop :=
  IsDegradableTo Œõ Œõ.complementary

/-- A channel is *antidegradable* if it `IsAntidegradableTo` its complementary channel. -/
@[reducible]
def IsAntidegradable (Œõ : CPTPMap dIn dOut) : Prop :=
  IsAntidegradableTo Œõ Œõ.complementary

--Theorem (Wilde Exercise 13.5.7): Entanglement breaking channels are antidegradable.
end degradable

end
end CPTPMap
