import Mathlib.Analysis.Convex.PathConnected
import Mathlib.Analysis.Convex.Quasiconvex
import Mathlib.Analysis.Convex.Topology
import Mathlib.Analysis.Normed.Order.Lattice
import Mathlib.Data.Fintype.Order
import Mathlib.Topology.Semicontinuous
import Mathlib.Analysis.SpecificLimits.Basic

@[simp]
theorem Set.image2_flip {Œ± Œ≤ Œ≥ : Type*} {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} (s : Set Œ±) (t : Set Œ≤) :
    image2 (flip f) t s = image2 f s t := by
  grind [image2, flip]

section ciSup

variable {Œπ Œ± : Type*} [ConditionallyCompleteLattice Œ±] {f g : Œπ ‚Üí Œ±} {a : Œ±}

/-- The **max-min theorem**. A version of `iSup_iInf_le_iInf_iSup` for conditionally complete lattices. -/
theorem ciSup_ciInf_le_ciInf_ciSup {Œπ': Type*} [Nonempty Œπ]
  (f : Œπ ‚Üí Œπ' ‚Üí Œ±) (Ha : ‚àÄ j, BddAbove (Set.range (f ¬∑ j))) (Hb : ‚àÄ i, BddBelow (Set.range (f i))) :
    ‚®Ü i, ‚®Ö j, f i j ‚â§ ‚®Ö j, ‚®Ü i, f i j :=
  ciSup_le fun i ‚Ü¶ ciInf_mono (Hb i) fun j ‚Ü¶ le_ciSup (Ha j) i

theorem lt_ciInf_iff {Œ± : Type*} {Œπ : Sort*} [Nonempty Œπ] [ConditionallyCompleteLattice Œ±] {f : Œπ ‚Üí Œ±} {a : Œ±}
    (hf : BddBelow (Set.range f)) :
    a < iInf f ‚Üî ‚àÉ b, a < b ‚àß ‚àÄ (i : Œπ), b ‚â§ f i :=
  ‚ü®(‚ü®iInf f, ¬∑, (ciInf_le hf ¬∑)‚ü©), fun ‚ü®_, hb‚ÇÅ, hb‚ÇÇ‚ü© ‚Ü¶ lt_of_lt_of_le hb‚ÇÅ (le_ciInf hb‚ÇÇ)‚ü©

theorem BddAbove.range_max (hf : BddAbove (Set.range f)) (hg : BddAbove (Set.range g)) :
    BddAbove (Set.range (max f g)) := by
  rcases hf with ‚ü®a, ha‚ü©
  rcases hg with ‚ü®b, hb‚ü©
  use a ‚äî b
  simp only [mem_upperBounds, Set.mem_range, forall_exists_index, forall_apply_eq_imp_iff, Pi.sup_apply] at ha hb ‚ä¢
  intro i
  specialize ha i
  specialize hb i
  order

theorem BddBelow.range_min (hf : BddBelow (Set.range f)) (hg : BddBelow (Set.range g)) :
    BddBelow (Set.range (min f g)) :=
  BddAbove.range_max (Œ± := Œ±·µí·µà) hf hg

variable [Nonempty Œπ]

theorem ciSup_sup_eq (hf : BddAbove (Set.range f)) (hg : BddAbove (Set.range g)) : ‚®Ü x, f x ‚äî g x = (‚®Ü x, f x) ‚äî ‚®Ü x, g x :=
  le_antisymm (ciSup_le fun _ => sup_le_sup (le_ciSup hf _) <| le_ciSup hg _)
    (sup_le (ciSup_mono (hf.range_max hg) fun _ => le_sup_left) <| ciSup_mono (hf.range_max hg) fun _ => le_sup_right)

theorem ciInf_inf_eq (hf : BddBelow (Set.range f)) (hg : BddBelow (Set.range g)) : ‚®Ö x, f x ‚äì g x = (‚®Ö x, f x) ‚äì ‚®Ö x, g x :=
  ciSup_sup_eq (Œ± := Œ±·µí·µà) hf hg

theorem sup_ciSup (hf : BddAbove (Set.range f)) : a ‚äî ‚®Ü x, f x = ‚®Ü x, a ‚äî f x := by
  rw [ciSup_sup_eq (by simp) hf, ciSup_const]

theorem inf_ciInf (hf : BddBelow (Set.range f)) : a ‚äì ‚®Ö x, f x = ‚®Ö x, a ‚äì f x :=
  sup_ciSup (Œ± := Œ±·µí·µà) hf

theorem ciInf_sup_ciInf_le (hf : BddBelow (Set.range f)) (hg : BddBelow (Set.range g)) :
    (‚®Ö i, f i) ‚äî ‚®Ö i, g i ‚â§ ‚®Ö i, f i ‚äî g i :=
  le_ciInf (fun i ‚Ü¶ sup_le_sup (ciInf_le hf i) (ciInf_le hg i))

theorem le_ciSup_inf_ciSup (hf : BddAbove (Set.range f)) (hg : BddAbove (Set.range g)) :
    ‚®Ü (i : Œπ), f i ‚äì g i ‚â§ (‚®Ü (i : Œπ), f i) ‚äì ‚®Ü (i : Œπ), g i :=
  ciInf_sup_ciInf_le (Œ± := Œ±·µí·µà) hf hg

omit [Nonempty Œπ] in
theorem ciInf_eq_min_cInf_inter_diff (S T : Set Œπ)
  [Nonempty (S ‚à© T : Set Œπ)] [Nonempty (S \ T : Set Œπ)] (hf : BddBelow (f '' S)) :
    ‚®Ö i : S, f i = (‚®Ö i : (S ‚à© T : Set Œπ), f i) ‚äì ‚®Ö i : (S \ T : Set Œπ), f i := by
  refine' le_antisymm _ _;
  ¬∑ rw [le_inf_iff]
    apply And.intro
    ¬∑ apply_rules [ ciInf_le, le_ciInf ];
      simp only [Subtype.forall, Set.mem_inter_iff, and_imp]
      exact fun a ha hb => ciInf_le ( show BddBelow ( Set.range fun i : S => f i ) by simpa [ Set.range ] using hf ) ‚ü® a, ha ‚ü©;
    ¬∑ apply_rules [ ciInf_le, le_ciInf ];
      simp only [Subtype.forall, Set.mem_diff, and_imp]
      exact fun a ha hb => ciInf_le ( show BddBelow ( Set.range fun i : S => f i ) by simpa [ Set.range ] using hf ) ‚ü® a, ha ‚ü©;
  ¬∑ have _ : Nonempty S := .map (fun (x : (S ‚à© T : Set _)) ‚Ü¶ ‚ü®x, x.2.1‚ü©) ‚Äπ_‚Ä∫
    apply le_csInf (Set.range_nonempty _)
    rintro i ‚ü®b, rfl‚ü©
    by_cases hiT : b.1 ‚àà T
    ¬∑ refine' le_trans ( inf_le_left ) _;
      refine' csInf_le _ _;
      ¬∑ exact ‚ü® hf.choose, Set.forall_mem_range.2 fun i => hf.choose_spec ‚ü® i, i.2.1, rfl ‚ü© ‚ü©;
      ¬∑ aesop
    ¬∑ refine' le_trans ( inf_le_right ) _;
      refine' csInf_le _ _
      ¬∑ exact ‚ü® hf.choose, Set.forall_mem_range.2 fun x => hf.choose_spec ‚ü® x, by aesop ‚ü© ‚ü©
      ¬∑ aesop

end ciSup

theorem QuasiconvexOn.subset
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [LE Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconvexOn ùïú s f) {t : Set E} (hts : t ‚äÜ s) (ht : Convex ùïú t) :
    QuasiconvexOn ùïú t f := by
  intro b
  convert ht.inter (h b) using 1
  simp +contextual [Set.ext_iff, @hts _]

theorem QuasiconvexOn.mem_segment_le_max
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [SemilatticeSup Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconvexOn ùïú s f)
  {x y z : E} (hx : x ‚àà s) (hy : y ‚àà s) (hz : z ‚àà segment ùïú x y):
    f z ‚â§ f x ‚äî f y :=
  ((h (f x ‚äî f y)).segment_subset (by simpa) (by simpa) hz).right

theorem QuasiconcaveOn.min_le_mem_segment
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [SemilatticeInf Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconcaveOn ùïú s f)
  {x y z : E} (hx : x ‚àà s) (hy : y ‚àà s) (hz : z ‚àà segment ùïú x y):
    f x ‚äì f y ‚â§ f z :=
  ((h (f x ‚äì f y)).segment_subset (by simpa) (by simpa) hz).right

theorem LowerSemicontinuousOn.bddBelow {Œ± : Type*} [TopologicalSpace Œ±] {S : Set Œ±} {g : Œ± ‚Üí ‚Ñù}
    (hg : LowerSemicontinuousOn g S) (hS : IsCompact S) : BddBelow (g '' S) := by
  rcases S.eq_empty_or_nonempty with rfl | hS‚ÇÇ
  ¬∑ simp
  have h_neighborhood : ‚àÄ x ‚àà S, ‚àÉ U ‚àà nhds x, ‚àÄ y ‚àà U ‚à© S, g y > g x - 1 := by
    -- By definition of lower semicontinuity, for each x ‚àà S, there exists a neighborhood U_x such that g(y) > g(x) - 1 for all y ‚àà U_x ‚à© S.
    intros x hx
    specialize hg x hx (g x - 1) (sub_one_lt (g x))
    rw [eventually_nhdsWithin_iff] at hg
    simp only [Set.mem_inter_iff, gt_iff_lt, and_imp]
    exact ‚ü®_, hg, fun y hy hyS ‚Ü¶ hy hyS‚ü©
  choose! U hU using h_neighborhood
  -- By the finite subcover property, there exists a finite subset t ‚äÜ S$ such that S ‚äÜ ‚ãÉ_{x ‚àà t} U_x$.
  obtain ‚ü®t, ht‚ü© : ‚àÉ t, (‚àÄ x ‚àà t, x ‚àà S) ‚àß S ‚äÜ ‚ãÉ x ‚àà t, U x :=
    hS.elim_nhds_subcover U fun x hx ‚Ü¶ hU x hx |>.1;
  -- Let $m$ be the minimum value of $g$ on the finite set $t$.
  obtain ‚ü®m, hm‚ü© : ‚àÉ m, ‚àÄ x ‚àà t, g x ‚â• m := by
    use Finset.min' (t.image g) ?_
    ¬∑ exact fun x hx ‚Ü¶ Finset.min'_le _ _ (t.mem_image_of_mem g hx)
    refine ‚ü®_, Finset.mem_image_of_mem g <| Classical.choose_spec <| Finset.nonempty_of_ne_empty ?_‚ü©
    rintro rfl
    simpa using ht.2 hS‚ÇÇ.some_mem
  use m - 1
  refine Set.forall_mem_image.mpr fun x hx ‚Ü¶ ?_
  rcases Set.mem_iUnion‚ÇÇ.mp (ht.2 hx) with ‚ü®y, hy, hy'‚ü©
  linarith [hm y hy, hU y (ht.1 y hy) |>.2 x ‚ü®hy', hx‚ü©]

theorem LowerSemicontinuousOn.max {Œ± : Type*} [TopologicalSpace Œ±] {S : Set Œ±} {f g : Œ± ‚Üí ‚Ñù}
    (hf : LowerSemicontinuousOn f S) (hg : LowerSemicontinuousOn g S) :
    LowerSemicontinuousOn (fun x ‚Ü¶ max (f x) (g x)) S := by
  convert lowerSemicontinuousOn_ciSup (s := S) (f := fun (i : Bool) x' ‚Ü¶ if i then f x' else g x') ?_ ?_
  ¬∑ rw [ciSup_eq_of_forall_le_of_forall_lt_exists_gt] <;> aesop
  ¬∑ simp
  ¬∑ simp [hf, hg]

variable {Œ± : Type*} [TopologicalSpace Œ±] {Œ≤ : Type*} [Preorder Œ≤] {f g : Œ± ‚Üí Œ≤} {x : Œ±}
  {s t : Set Œ±} {y z : Œ≤} {Œ≥ : Type*} [LinearOrder Œ≥]

theorem lowerSemicontinuousOn_iff_isClosed_preimage {f : Œ± ‚Üí Œ≥} [IsClosed s] :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ y, IsClosed (s ‚à© f ‚Åª¬π' Set.Iic y) := by
  constructor
  ¬∑ intro a y
    refine' isClosed_of_closure_subset fun x hx => _;
    rw [ mem_closure_iff ] at hx;
    contrapose! hx;
    rcases em ( x ‚àà s ) with hx' | hx'
    ¬∑ simp only [Set.mem_inter_iff, hx', Set.mem_preimage, Set.mem_Iic, true_and, not_le] at hx
      have := a x hx';
      rcases mem_nhdsWithin.1 ( this y hx ) with ‚ü® o, ho, h ‚ü©;
      exact ‚ü® o, ho, h.1, Set.eq_empty_iff_forall_notMem.2 fun z hz => h.2 ‚ü® hz.1, hz.2.1 ‚ü© |> not_le_of_gt <| Set.mem_Iic.1 hz.2.2 ‚ü©;
    ¬∑ exact ‚ü® s·∂ú, IsClosed.isOpen_compl, hx', by aesop ‚ü©;
  ¬∑ intro a x hx y hy
    have hx_not_in : x ‚àâ s ‚à© f ‚Åª¬π' Set.Iic y := by
      simp [hy]
    rw [ eventually_nhdsWithin_iff ]
    filter_upwards [ IsOpen.mem_nhds ( isOpen_compl_iff.2 ( a y ) ) hx_not_in ] with z hz hzs
    exact lt_of_not_ge fun h => hz ‚ü®hzs, h‚ü©

theorem segment.isConnected {E : Type u_1} [AddCommGroup E] [Module ‚Ñù E] [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul ‚Ñù E] (a b : E) :
    IsConnected (segment ‚Ñù a b) := by
  rw [‚Üê Path.range_segment a b]
  exact isConnected_range (Path.segment a b).continuous

theorem BddAbove.range_inf_of_image2 {M N Œ± : Type*} {f : M ‚Üí N ‚Üí Œ±} [ConditionallyCompleteLinearOrder Œ±]
  {S : Set M} {T : Set N} (h_bddA : BddAbove (Set.image2 f S T)) (h_bddB : BddBelow (Set.image2 f S T)) :
    BddAbove (Set.range fun y : T ‚Ü¶ ‚®Ö x : S, f x y) := by
  rcases isEmpty_or_nonempty T with hT | hT
  ¬∑ aesop
  rcases S.eq_empty_or_nonempty with rfl | hS
  ¬∑ simp [Set.range, iInf]
  rw [‚Üê Set.nonempty_coe_sort, nonempty_subtype] at hS
  rcases hS with ‚ü®x, hx‚ü©
  choose z hz using h_bddA
  choose w hw using h_bddB
  have h_inf_le_M : ‚àÄ y ‚àà T, ‚®Ö x : S, f x y ‚â§ z := by
    intro y hy
    apply (ciInf_le ‚ü®_, Set.forall_mem_range.2 (hw <| Set.mem_image2_of_mem ¬∑.2 hy)‚ü© ‚ü®x, hx‚ü©).trans
    exact hz (Set.mem_image2_of_mem hx hy)
  exact ‚ü®_, Set.forall_mem_range.2 (h_inf_le_M _ ¬∑.2)‚ü©

theorem BddBelow.range_sup_of_image2 {M N Œ± : Type*} {f : M ‚Üí N ‚Üí Œ±} [ConditionallyCompleteLinearOrder Œ±]
  {S : Set M} {T : Set N} (h_bddA : BddAbove (Set.image2 f S T)) (h_bddB : BddBelow (Set.image2 f S T)) :
      BddBelow (Set.range fun y : T ‚Ü¶ ‚®Ü x : S, f x y) :=
  BddAbove.range_inf_of_image2 (Œ± := Œ±·µí·µà) h_bddB h_bddA

theorem ciInf_le_ciInf_of_subset {Œ± Œ≤ : Type*} [ConditionallyCompleteLattice Œ±]
  {f : Œ≤ ‚Üí Œ±} {s t : Set Œ≤} (hs : s.Nonempty) (hf : BddBelow (f '' t)) (hst : s ‚äÜ t) :
    ‚®Ö x : t, f x ‚â§ ‚®Ö x : s, f x := by
  have h_lower_bound : ‚àÄ y ‚àà s, ‚®Ö x : t, f x ‚â§ f y := by
    intro y hy
    obtain ‚ü®w_1, ‚ü®left_1, right_1‚ü©‚ü© : f y ‚àà f '' t := by
      use y, hst hy
    exact le_trans ( ciInf_le (by simpa [ Set.range ] using hf ) ‚ü® w_1, left_1 ‚ü© ) ( by simp[right_1] );
  apply le_csInf
  ¬∑ exact ‚ü®_, ‚ü®‚ü®_, hs.choose_spec‚ü©, rfl‚ü©‚ü©;
  ¬∑ aesop

theorem LowerSemicontinuousOn.dite_top {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [Preorder Œ≤] [OrderTop Œ≤]
  {s : Set Œ±} (p : Œ± ‚Üí Prop) [DecidablePred p] {f : (a : Œ±) ‚Üí p a ‚Üí Œ≤}
  (hf : LowerSemicontinuousOn (fun x : Subtype p ‚Ü¶ f x.val x.prop) {x | x.val ‚àà s})
  (h_relatively_closed : ‚àÉ U : Set Œ±, IsClosed U ‚àß s ‚à© U = s ‚à© setOf p) :
    LowerSemicontinuousOn (fun x ‚Ü¶ dite (p x) (f x) (fun _ ‚Ü¶ ‚ä§)) s := by
  rcases h_relatively_closed with ‚ü®u, ‚ü®hu, hsu‚ü©‚ü©
  simp only [Set.ext_iff, Set.mem_inter_iff, Set.mem_setOf_eq, and_congr_right_iff] at hsu
  intro x hx y hy
  dsimp at hy
  split_ifs at hy with h
  ¬∑ specialize hf ‚ü®x, h‚ü© hx y hy
    rw [ eventually_nhdsWithin_iff ] at hf ‚ä¢
    rw [ nhds_subtype_eq_comap, Filter.eventually_comap ] at hf;
    filter_upwards [hf]
    simp only [Subtype.forall]
    grind [lt_top_of_lt]
  ¬∑ filter_upwards [self_mem_nhdsWithin, mem_nhdsWithin_of_mem_nhds (hu.isOpen_compl.mem_nhds (show x ‚àâ u by grind))]
    intros
    simp_all only [Set.mem_compl_iff, ‚ÜìreduceDIte]

theorem LowerSemicontinuousOn.comp_continuousOn {Œ± Œ≤ Œ≥ : Type*}
  [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [Preorder Œ≥] {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {g : Œ≤ ‚Üí Œ≥} {t : Set Œ≤}
  (hg : LowerSemicontinuousOn g t) (hf : ContinuousOn f s) (h : Set.MapsTo f s t) :
    LowerSemicontinuousOn (g ‚àò f) s := by
  intro x hx y hy
  have h_neighborhood : ‚àÉ U ‚àà nhds (f x), ‚àÄ z ‚àà U ‚à© t, y < g z := by
    have := hg ( f x ) ( h hx ) y hy
    simp_all only [Function.comp_apply, Set.mem_inter_iff, and_imp]
    rw [ eventually_nhdsWithin_iff ] at this
    aesop
  obtain ‚ü®U, hU_nhds, hU‚ü© : ‚àÉ U ‚àà nhds (f x), ‚àÄ z ‚àà U ‚à© t, y < g z := h_neighborhood
  have h_final : ‚àÄ·∂† x' in nhdsWithin x s, f x' ‚àà U ‚àß f x' ‚àà t := by
    filter_upwards [ hf x hx hU_nhds, self_mem_nhdsWithin ] with x' hx' hx'' using ‚ü® hx', h hx'' ‚ü©;
  exact h_final.mono fun x' hx' => hU _ hx'

theorem UpperSemicontinuousOn.comp_continuousOn {Œ± Œ≤ Œ≥ : Type*}
  [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [Preorder Œ≥] {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {g : Œ≤ ‚Üí Œ≥} {t : Set Œ≤}
  (hg : UpperSemicontinuousOn g t) (hf : ContinuousOn f s) (h : Set.MapsTo f s t) :
    UpperSemicontinuousOn (g ‚àò f) s :=
  LowerSemicontinuousOn.comp_continuousOn (Œ≥ := Œ≥·µí·µà) hg hf h

theorem LowerSemicontinuousOn.ite_top {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [Preorder Œ≤] [OrderTop Œ≤]
  {s : Set Œ±} (p : Œ± ‚Üí Prop) [DecidablePred p] {f : (a : Œ±) ‚Üí Œ≤} (hf : LowerSemicontinuousOn f (s ‚à© setOf p))
  (h_relatively_closed : ‚àÉ U : Set Œ±, IsClosed U ‚àß s ‚à© U = s ‚à© setOf p) :
    LowerSemicontinuousOn (fun x ‚Ü¶ ite (p x) (f x) ‚ä§) s :=
  dite_top p (hf.comp_continuousOn (by fun_prop) (by intro; simp)) h_relatively_closed

theorem LeftOrdContinuous.comp_lowerSemicontinuousOn_strong_assumptions {Œ± Œ≥ Œ¥ : Type*}
  [TopologicalSpace Œ±] [LinearOrder Œ≥] [LinearOrder Œ¥] [TopologicalSpace Œ¥] [OrderTopology Œ¥]
  [TopologicalSpace Œ≥] [OrderTopology Œ≥] [DenselyOrdered Œ≥] [DenselyOrdered Œ¥]
  {s : Set Œ±} {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : LeftOrdContinuous g) (hf : LowerSemicontinuousOn f s) (hg2 : Monotone g) :
    LowerSemicontinuousOn (g ‚àò f) s := by
  intros x hx y hy
  have hU : ‚àÉ U ‚àà nhds x, ‚àÄ z ‚àà U ‚à© s, g (f z) > y := by
    simp_all only [Set.mem_inter_iff, gt_iff_lt, and_imp]
    obtain ‚ü®z, hz1, hz2‚ü© : ‚àÉ z, y < g z ‚àß z < f x := by
      obtain ‚ü®z, hz‚ü© : ‚àÉ z, z < f x ‚àß y < g z := by
        by_contra h_contra
        simp only [not_exists, not_and, not_lt] at h_contra
        have h_exists_z : ‚àÉ z, z < f x ‚àß g z > y := by
          have h_lub : IsLUB (Set.Iio (f x)) (f x) := by
            exact isLUB_Iio
          have := hg h_lub;
          have := this.exists_between hy
          simp_all only [Set.mem_image, Set.mem_Iio, exists_exists_and_eq_and, gt_iff_lt]
          grind
        exact h_exists_z.choose_spec.2.not_ge ( h_contra _ h_exists_z.choose_spec.1 );
      aesop
    specialize hf x hx z hz2
    rw [ eventually_nhdsWithin_iff ] at hf
    exact ‚ü®_, hf, fun _ hx hx' ‚Ü¶ hz1.trans_le (hg2 (hx hx').le)‚ü©
  simp only [Set.mem_inter_iff, and_imp] at hU
  obtain ‚ü®w, ‚ü®left, right‚ü©‚ü© := hU
  exact Filter.eventually_inf_principal.2 (Filter.mem_of_superset left right)

theorem UpperSemicontinuousOn.frequently_lt_of_tendsto {Œ± Œ≤ Œ≥ : Type*} [TopologicalSpace Œ≤] [Preorder Œ≥]
  {f : Œ≤ ‚Üí Œ≥} {T : Set Œ≤} (hf : UpperSemicontinuousOn f T) {c : Œ≥} {zs : Œ± ‚Üí Œ≤} {z : Œ≤}
  {l : Filter Œ±} [l.NeBot] (hzs : l.Tendsto zs (nhds z)) (hx‚ÇÇ : f z < c) (hzI : ‚àÄ a, zs a ‚àà T) (hzT : z ‚àà T) :
    ‚àÄ·∂† a in l, f (zs a) < c := by
  have h : ‚àÄ·∂† n in l, zs n ‚àà {y ‚àà T | f y < c} := by
    filter_upwards [hzs.eventually (eventually_nhdsWithin_iff.mp ((hf z hzT) c hx‚ÇÇ))] with n hn
      using ‚ü®hzI n, hn (hzI n)‚ü©
  simp_all

theorem Finset.ciInf_insert {Œ± Œ≤ : Type*} [DecidableEq Œ±] [ConditionallyCompleteLattice Œ≤]
  (t : Finset Œ±) (ht : t.Nonempty) (x : Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚®Ö (a : (insert x t : _)), f a = f x ‚äì ‚®Ö (a : t), f a := by
  apply le_antisymm
  ¬∑ apply le_inf
    ¬∑ apply csInf_le <;> aesop
    apply le_csInf
    ¬∑ exact ‚ü®_, ‚ü®‚ü®ht.choose, ht.choose_spec ‚ü©, rfl‚ü©‚ü©
    rintro _ ‚ü®‚ü®a, ha‚ü©, rfl‚ü©
    exact csInf_le (Finite.bddBelow_range _) ‚ü®‚ü®a, Finset.mem_insert_of_mem ha‚ü©, rfl‚ü©
  ¬∑ apply le_csInf
    ¬∑ exact ‚ü®_, ‚ü®‚ü®x, Finset.mem_insert_self _ _‚ü©, rfl‚ü©‚ü©
    simp only [Set.mem_range, Subtype.exists, mem_insert, exists_prop, exists_eq_or_imp]
    rintro b (rfl | ‚ü®_, ‚ü®_, rfl‚ü©‚ü©)
    ¬∑ exact inf_le_left
    apply inf_le_right.trans
    apply csInf_le (Set.finite_range _).bddBelow
    aesop

theorem Finset.ciSup_insert {Œ± Œ≤ : Type*} [DecidableEq Œ±] [ConditionallyCompleteLattice Œ≤]
  (t : Finset Œ±) (ht : t.Nonempty) (x : Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚®Ü (a : (insert x t : _)), f a = f x ‚äî ‚®Ü (a : t), f a :=
  t.ciInf_insert (Œ≤ := Œ≤·µí·µà) ht x f

section sion_minimax
/-!
Following https://projecteuclid.org/journals/kodai-mathematical-journal/volume-11/issue-1/Elementary-proof-for-Sions-minimax-theorem/10.2996/kmj/1138038812.full, with some corrections. There are two errors in Lemma 2 and the main theorem: an incorrect step that
`(‚àÄ x, a < f x) ‚Üí (a < ‚®Ö x, f x)`. This is repaired by taking an extra `exists_between` to get `a < b < ‚®Ö ...`, concluding that
`(‚àÄ x, b < f x) ‚Üí (b ‚â§ ‚®Ö x, f x)` and so `(a < ‚®Ö x, f x)`.
-/

variable  {M : Type*} [NormedAddCommGroup M]
  {N : Type*}
  {f : M ‚Üí N ‚Üí ‚Ñù} {S : Set M} {T : Set N}
  (hfc‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí LowerSemicontinuousOn (f ¬∑ y) S)
  (hS‚ÇÅ : IsCompact S) (hS‚ÇÉ : S.Nonempty) (hT‚ÇÉ : T.Nonempty)

include hfc‚ÇÇ hS‚ÇÅ hS‚ÇÉ in
private theorem sion_exists_min_lowerSemi (a : ‚Ñù) (hc : ‚àÄ y‚ÇÄ : T, ‚®Ö (x : S), f (‚Üëx) y‚ÇÄ ‚â§ a) (z : N) (hzT : z ‚àà T) :
    ‚àÉ x ‚àà S, f x z ‚â§ a := by
  let _ := hS‚ÇÉ.to_subtype
  contrapose! hc
  use ‚ü®z, hzT‚ü©
  have h_lower_bound (x : S) : a < f x z := hc x x.2
  apply lt_of_le_of_ne
  ¬∑ apply le_csInf (Set.range_nonempty _)
    rintro _ ‚ü®x, rfl‚ü©
    exact (h_lower_bound x).le
  intro h
  obtain ‚ü®x, hxz‚ü© : ‚àÉ x : S, f x z ‚â§ a := by
    obtain ‚ü®xn, hxn‚ü© : ‚àÉ xn : ‚Ñï ‚Üí S, Filter.atTop.Tendsto (fun n => f (xn n) z) (nhds a) := by
      have h_eps : ‚àÄ Œµ > 0, ‚àÉ x : S, f x z < a + Œµ := by
        intro Œµ Œµpos
        have hx : ‚®Ö x : S, f x z < a + Œµ := by linarith
        simpa using exists_lt_of_csInf_lt (Set.range_nonempty _) hx
      choose! xn hxn using h_eps
      use fun n ‚Ü¶ xn (1 / (n + 1))
      rw [tendsto_iff_dist_tendsto_zero]
      refine squeeze_zero (fun _ ‚Ü¶ abs_nonneg _) (fun n ‚Ü¶ ?_) tendsto_one_div_add_atTop_nhds_zero_nat
      refine abs_le.mpr ‚ü®?_, ?_‚ü© <;> linarith [h_lower_bound (xn (1 / (n + 1))), hxn (1 / (n + 1)) (by positivity)]
    obtain ‚ü®x, subseq, hsubseq‚ÇÅ, hsubseq‚ÇÇ‚ü© : ‚àÉ x : S, ‚àÉ subseq : ‚Ñï ‚Üí ‚Ñï,
        StrictMono subseq ‚àß Filter.Tendsto (fun n => xn (subseq n)) Filter.atTop (nhds x) := by
      simpa using (isCompact_iff_isCompact_univ.mp hS‚ÇÅ).isSeqCompact (x := xn) fun _ ‚Ü¶ trivial
    use x
    refine le_of_forall_pos_le_add fun Œµ Œµpos ‚Ü¶ ?_
    rw [‚Üê tsub_le_iff_right]
    apply le_of_tendsto_of_tendsto tendsto_const_nhds (hxn.comp hsubseq‚ÇÅ.tendsto_atTop)
    apply Filter.eventually_atTop.mpr
    rw [Metric.tendsto_atTop] at hsubseq‚ÇÇ
    have ‚ü®Œ¥, Œ¥pos, H‚ü© : ‚àÉ Œ¥ > 0, ‚àÄ y ‚àà S, dist y x < Œ¥ ‚Üí f y z > f x z - Œµ := by
      obtain ‚ü®Œ¥, hŒ¥‚ü© := Metric.mem_nhdsWithin_iff.mp (((hfc‚ÇÇ z hzT) x x.2) _ (sub_lt_self _ Œµpos))
      exact ‚ü®Œ¥, hŒ¥.1, fun y hy hyx => hŒ¥.2 ‚ü®hyx, hy‚ü©‚ü©
    rcases hsubseq‚ÇÇ Œ¥ Œ¥pos with ‚ü®N, hN‚ü©
    exact ‚ü®N, fun n hn ‚Ü¶ (H _ (xn (subseq n)).coe_prop (hN _ hn)).le‚ü©
  specialize h_lower_bound x
  order

variable [Module ‚Ñù M] [ContinuousAdd M] [ContinuousSMul ‚Ñù M]
variable [NormedAddCommGroup N] [Module ‚Ñù N] [ContinuousAdd N] [ContinuousSMul ‚Ñù N]
variable
  (hfc‚ÇÅ : ‚àÄ x, x ‚àà S ‚Üí UpperSemicontinuousOn (f x) T)
  (hfq‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí QuasiconvexOn ‚Ñù S (f ¬∑ y))
  (hfq‚ÇÅ : ‚àÄ x, x ‚àà S ‚Üí QuasiconcaveOn ‚Ñù T (f x))
  (hT‚ÇÇ : Convex ‚Ñù T) (hS‚ÇÇ : Convex ‚Ñù S)

include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hT‚ÇÇ hS‚ÇÉ in
private lemma sion_exists_min_2 (y‚ÇÅ y‚ÇÇ : N) (hy‚ÇÅ : y‚ÇÅ ‚àà T) (hy‚ÇÇ : y‚ÇÇ ‚àà T)
    (a : ‚Ñù) (ha : a < ‚®Ö x : S, (max (f x y‚ÇÅ) (f x y‚ÇÇ)))
    : ‚àÉ y‚ÇÄ : T, a < ‚®Ö x : S, f x y‚ÇÄ := by
  by_contra! hc
  have _ := isCompact_iff_compactSpace.mp hS‚ÇÅ
  have _ := hS‚ÇÅ.isClosed
  obtain ‚ü®Œ≤, hŒ≤‚ÇÅ, hŒ≤‚ÇÇ‚ü© := exists_between ha
  let C : N ‚Üí Set M := fun z ‚Ü¶ { x ‚àà S | f x z ‚â§ a }
  let C' : N ‚Üí Set M := fun z ‚Ü¶ { x ‚àà S | f x z ‚â§ Œ≤ }
  let A := C' y‚ÇÅ
  let B := C' y‚ÇÇ
  have hC_subset_C' (z) : C z ‚äÜ C' z :=
    fun x hx ‚Ü¶ ‚ü®hx.1, hx.2.trans hŒ≤‚ÇÅ.le‚ü©
  have hC_nonempty (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : (C z).Nonempty := by
    simp only [Set.Nonempty, Set.mem_setOf_eq, C]
    exact sion_exists_min_lowerSemi hfc‚ÇÇ hS‚ÇÅ hS‚ÇÉ a hc z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz)
  have hC_closed (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : IsClosed (C z) := by
    specialize hfc‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz)
    rw [lowerSemicontinuousOn_iff_isClosed_preimage] at hfc‚ÇÇ
    exact hfc‚ÇÇ a
  have hC'_nonempty (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : (C' z).Nonempty :=
    (hC_nonempty z hz).mono (hC_subset_C' z)
  have hC'_closed (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : IsClosed (C' z) := by
    specialize hfc‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz)
    rw [lowerSemicontinuousOn_iff_isClosed_preimage] at hfc‚ÇÇ
    exact hfc‚ÇÇ Œ≤
  have hA_nonempty : A.Nonempty := hC'_nonempty y‚ÇÅ (left_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hA_closed : IsClosed A := hC'_closed y‚ÇÅ (left_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hB_nonempty : B.Nonempty := hC'_nonempty y‚ÇÇ (right_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hB_closed : IsClosed B := hC'_closed y‚ÇÇ (right_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hAB : A ‚à© B = ‚àÖ := by
    simp [A, B, C', Set.ext_iff]
    intro x hx hŒ≤y‚ÇÅ _
    by_contra! hŒ≤y‚ÇÇ
    have hŒ≤ := max_le hŒ≤y‚ÇÅ hŒ≤y‚ÇÇ
    revert hŒ≤
    rw [imp_false, not_le]
    refine lt_of_lt_of_le hŒ≤‚ÇÇ ?_
    have h := ((hfc‚ÇÇ y‚ÇÅ hy‚ÇÅ).max (hfc‚ÇÇ y‚ÇÇ hy‚ÇÇ)).bddBelow hS‚ÇÅ
    rw [Set.image_eq_range] at h
    exact ciInf_le h ‚ü®x, hx‚ü©
  have hfxz (x) (hx : x ‚àà S) (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : min (f x y‚ÇÅ) (f x y‚ÇÇ) ‚â§ f x z :=
    (hfq‚ÇÅ x hx).min_le_mem_segment hy‚ÇÅ hy‚ÇÇ hz
  have hC'zAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : C' z ‚äÜ A ‚à™ B := by
    --TODO: On newer Mathlib this is just `grind [inf_le_iff, le_trans]`
    intro; simp [C', A, B]; grind [inf_le_iff, le_trans]
  have hC'z (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : Convex ‚Ñù (C' z) :=
    hfq‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz) Œ≤
  have hC'zAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : C' z ‚äÜ A ‚à® C' z ‚äÜ B := by
    specialize hC_subset_C' z
    specialize hC'z z hz
    have hC' : IsPreconnected (C' z) :=
      ((hC'z).isConnected ((hC_nonempty z hz).mono hC_subset_C')).isPreconnected
    rw [isPreconnected_iff_subset_of_disjoint_closed] at hC'
    exact hC' A B hA_closed hB_closed (hC'zAB z hz) (by simp [hAB])
  have hCzAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : C z ‚äÜ A ‚à® C z ‚äÜ B := by
    specialize hC_subset_C' z
    rcases hC'zAB z hz with h | h
    ¬∑ exact .inl (hC_subset_C'.trans h)
    ¬∑ exact .inr (hC_subset_C'.trans h)
  have h_not_CzAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : ¬¨(C z ‚äÜ A ‚àß C z ‚äÜ B) := by
    rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    specialize hC_nonempty z hz
    replace h‚ÇÅ := Set.mem_of_mem_of_subset hC_nonempty.some_mem h‚ÇÅ
    replace h‚ÇÇ := Set.mem_of_mem_of_subset hC_nonempty.some_mem h‚ÇÇ
    simpa [hAB] using Set.mem_inter h‚ÇÅ h‚ÇÇ
  let I : Set N := { z | z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ ‚àß C z ‚äÜ A}
  let J : Set N := { z | z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ ‚àß C z ‚äÜ B}
  have hI‚ÇÅ : I.Nonempty := by
    use y‚ÇÅ
    simp [I, A, hC_subset_C', left_mem_segment]
  have hJ‚ÇÅ : J.Nonempty := by
    use y‚ÇÇ
    simp [J, B, hC_subset_C', right_mem_segment]
  rw [Set.nonempty_iff_ne_empty] at hI‚ÇÅ hJ‚ÇÅ
  have hIJ : I ‚à© J = ‚àÖ := by
    simp [I, J, Set.ext_iff]
    intro z hz hCzA _ hCzB
    specialize hCzA (hC_nonempty z hz).some_mem
    specialize hCzB (hC_nonempty z hz).some_mem
    rw [‚Üê Set.disjoint_iff_inter_eq_empty, Set.disjoint_left] at hAB
    tauto
  have hIJ‚ÇÇ : I ‚à™ J = segment ‚Ñù y‚ÇÅ y‚ÇÇ := by
    simp [I, J, Set.ext_iff]
    grind
  have hI : IsClosed I := by
    apply IsSeqClosed.isClosed
    intro zs z hzI hzs
    simp only [Set.mem_setOf_eq, I, C] at hzI
    replace ‚ü®hzI, hzI2‚ü© := And.intro (hzI ¬∑ |>.left) (hzI ¬∑ |>.right)
    have hz_mem : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ :=
      have cloL : IsClosed (segment ‚Ñù y‚ÇÅ y‚ÇÇ) := by
        rw [‚Üê closure_openSegment]
        exact isClosed_closure
      cloL.isSeqClosed hzI hzs
    let x := (hC_nonempty z hz_mem).some
    have hx : x ‚àà C z := (hC_nonempty z hz_mem).some_mem
    suffices hn : ‚àÉ n, x ‚àà C' (zs n) by
      use hz_mem
      rcases hn with ‚ü®n, hn‚ü©
      have hCzn : C (zs n) ‚äÜ A := hzI2 n
      replace hCzn : C' (zs n) ‚äÜ A := by
        refine (hC'zAB (zs n) (hzI n)).resolve_right ?_
        intro hC'B
        exact (h_not_CzAB (zs n) (hzI n)) ‚ü®hCzn, (hC_subset_C' _).trans hC'B‚ü©
      have hxA : x ‚àà A := Set.mem_of_mem_of_subset hn hCzn
      refine (hCzAB z hz_mem).resolve_right ?_
      intro hCB
      have hAC : A ‚à© C z ‚äÜ A ‚à© B := by apply Set.inter_subset_inter_right _ hCB
      rw [hAB, Set.subset_empty_iff, Set.ext_iff] at hAC
      revert hAC
      simp only [Set.mem_inter_iff, Set.mem_empty_iff_false, iff_false, not_and, imp_false, not_forall, not_not]
      exact ‚ü®x, hxA, hx‚ü©
    suffices hn : ‚àÉ n, f x (zs n) < Œ≤ by
      refine hn.imp fun n ‚Ü¶ ?_
      simp +contextual [C', le_of_lt, hx.left]
    simp only [Set.mem_setOf_eq, C] at hx
    rcases hx with ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
    specialize hfc‚ÇÅ x hx‚ÇÅ
    replace hx‚ÇÇ := hx‚ÇÇ.trans_lt hŒ≤‚ÇÅ
    replace hzI (n) := hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ (hzI n)
    replace hz_mem := hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz_mem
    exact (hfc‚ÇÅ.frequently_lt_of_tendsto hzs hx‚ÇÇ hzI hz_mem).exists
  have hJ : IsClosed J := by
    apply IsSeqClosed.isClosed
    intro zs z hzI hzs
    simp only [Set.mem_setOf_eq, J, C] at hzI
    replace ‚ü®hzI, hzI2‚ü© := And.intro (hzI ¬∑ |>.left) (hzI ¬∑ |>.right)
    have hz_mem : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ :=
      have cloL : IsClosed (segment ‚Ñù y‚ÇÅ y‚ÇÇ) := by
        rw [‚Üê closure_openSegment]
        exact isClosed_closure
      cloL.isSeqClosed hzI hzs
    let x := (hC_nonempty z hz_mem).some
    have hx : x ‚àà C z := (hC_nonempty z hz_mem).some_mem
    suffices hn : ‚àÉ n, x ‚àà C' (zs n) by
      use hz_mem
      rcases hn with ‚ü®n, hn‚ü©
      have hCzn : C (zs n) ‚äÜ B := hzI2 n
      replace hCzn : C' (zs n) ‚äÜ B := by
        refine (hC'zAB (zs n) (hzI n)).resolve_left ?_
        intro hC'B
        exact (h_not_CzAB (zs n) (hzI n)) ‚ü®(hC_subset_C' _).trans hC'B, hCzn‚ü©
      have hxA : x ‚àà B := Set.mem_of_mem_of_subset hn hCzn
      refine (hCzAB z hz_mem).resolve_left ?_
      intro hCB
      have hAC : C z ‚à© B ‚äÜ A ‚à© B := by apply Set.inter_subset_inter_left _ hCB
      rw [hAB, Set.subset_empty_iff, Set.ext_iff] at hAC
      revert hAC
      simp only [Set.mem_inter_iff, Set.mem_empty_iff_false, iff_false, not_and, imp_false, not_forall, not_not]
      exact ‚ü®x, hx, hxA‚ü©
    suffices hn : ‚àÉ n, f x (zs n) < Œ≤ by
      refine hn.imp fun n ‚Ü¶ ?_
      simp +contextual [C', le_of_lt, hx.left]
    simp only [Set.mem_setOf_eq, C] at hx
    rcases hx with ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
    specialize hfc‚ÇÅ x hx‚ÇÅ
    replace hx‚ÇÇ := hx‚ÇÇ.trans_lt hŒ≤‚ÇÅ
    replace hzI (n) := hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ (hzI n)
    replace hz_mem := hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz_mem
    exact (hfc‚ÇÅ.frequently_lt_of_tendsto hzs hx‚ÇÇ hzI hz_mem).exists
  have hConnected := segment.isConnected y‚ÇÅ y‚ÇÇ
  rw [IsConnected, isPreconnected_iff_subset_of_fully_disjoint_closed ?_] at hConnected; swap
  ¬∑ rw [‚Üê closure_openSegment]
    exact isClosed_closure
  replace hConnected := hConnected.right I J
  simp [hIJ, ‚Üê hIJ‚ÇÇ, Set.disjoint_iff_inter_eq_empty] at hConnected
  obtain hL | hR := hConnected hI hJ
  ¬∑ rw [Set.inter_eq_self_of_subset_right hL] at hIJ
    exact hJ‚ÇÅ hIJ
  ¬∑ rw [Set.inter_eq_self_of_subset_left hR] at hIJ
    exact hI‚ÇÅ hIJ

include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ in
private lemma sion_exists_min_fin
  (h_bddA : BddAbove (Set.image2 f S T)) (h_bddB : BddBelow (Set.image2 f S T))
  (ys : Finset N) (hys_n : ys.Nonempty) (hys : (ys : Set N) ‚äÜ T)
  (a : ‚Ñù) (ha : a < ‚®Ö x : S, ‚®Ü yi : ys, f x yi)
    : ‚àÉ y‚ÇÄ : T, a < ‚®Ö x : S, f x y‚ÇÄ := by
  induction hys_n using Finset.Nonempty.cons_induction generalizing S
  case singleton x =>
    simp at ha hys
    use ‚ü®x, hys‚ü©
  case cons y‚Çô t hxt htn ih =>
    classical rw [Finset.cons_eq_insert] at hys ha
    simp [Set.insert_subset_iff] at hys
    rcases hys with ‚ü®hy‚Çô, ht‚ü©
    let _ := hS‚ÇÉ.to_subtype
    obtain ‚ü®b, hab, hb‚ü© := exists_between ha
    let S' := {z : M | z ‚àà S ‚àß f z y‚Çô ‚â§ b}
    have hS'_sub : S' ‚äÜ S := Set.sep_subset ..
    rcases S'.eq_empty_or_nonempty with hS'_e | hS'_n
    ¬∑ simp [S'] at hS'_e
      use ‚ü®y‚Çô, hy‚Çô‚ü©
      rw [lt_ciInf_iff]; swap
      ¬∑ --BddBelow (Set.range fun x : S => f (‚Üëx) y‚Çô)
        convert (hfc‚ÇÇ y‚Çô hy‚Çô).bddBelow hS‚ÇÅ
        ext; simp
      use b, hab
      intro i
      exact (hS'_e i i.2).le
    let _ := hS'_n.to_subtype
    have hS'‚ÇÅ : IsCompact S' := by
      apply hS‚ÇÅ.of_isClosed_subset ?_ hS'_sub
      specialize hfc‚ÇÇ y‚Çô
      rw [lowerSemicontinuousOn_iff_isClosed_epigraph hS‚ÇÅ.isClosed] at hfc‚ÇÇ
      have ha_closed : IsClosed {p : M √ó ‚Ñù | p.2 = b} := by
        convert isClosed_univ.prod (isClosed_singleton (x := b))
        simp [Set.ext_iff]
      suffices Continuous (fun (z : M) ‚Ü¶ (z, b) : M ‚Üí M √ó ‚Ñù) by
        convert ((hfc‚ÇÇ hy‚Çô).inter ha_closed).preimage this
        simp [S']
      fun_prop
    have hS'‚ÇÇ : Convex ‚Ñù S' := hfq‚ÇÇ _ hy‚Çô _
    have ha' : a < ‚®Ö x : S', ‚®Ü yi : t, f x yi := by
      apply lt_of_lt_of_le hab (hb.le.trans ?_)
      classical
      trans (‚®Ö x : S', ‚®Ü yi : { x // x ‚àà (Insert.insert y‚Çô t : Finset N)}, f ‚Üëx ‚Üëyi)
      ¬∑ apply ciInf_le_ciInf_of_subset (f := fun x ‚Ü¶ ‚®Ü yi : { x // x ‚àà (Insert.insert y‚Çô t : Finset N)}, f ‚Üëx ‚Üëyi)
        ¬∑ exact hS'_n
        ¬∑ --BddBelow ((fun x => ‚®Ü yi, f x ‚Üëyi) '' S)
          convert BddBelow.range_sup_of_image2 (T := S) (S := { x | x ‚àà insert y‚Çô t }) (f := flip f)
            (by apply h_bddA.mono; simp [flip]; grind) (by apply h_bddB.mono; simp [flip]; grind)
          simp [Set.ext_iff, flip]
        ¬∑ exact hS'_sub
      ¬∑ gcongr with x
        ¬∑ --BddBelow (Set.range fun x : S' => ‚®Ü yi, f ‚Üëx ‚Üëyi)
          exact BddBelow.range_sup_of_image2 (T := S') (S := { x | x ‚àà insert y‚Çô t }) (f := flip f)
            (by apply h_bddA.mono; simp [flip]; grind) (by apply h_bddB.mono; simp [flip]; grind)
        rw [t.ciSup_insert htn]
        simp only [sup_le_iff, le_refl, and_true]
        conv at hb => enter [2, 1, x]; rw [t.ciSup_insert htn]
        contrapose! hb
        refine ciInf_le_of_le ?_ ‚ü®x.val, hS'_sub x.2‚ü© ?_
        ¬∑ --BddBelow (Set.range fun x => max (f (‚Üëx) y‚Çô) (‚®Ü a, f ‚Üëx ‚Üëa))
          apply BddBelow.range_mono (h := fun x ‚Ü¶ le_max_left _ _)
          convert (hfc‚ÇÇ y‚Çô hy‚Çô).bddBelow hS‚ÇÅ
          ext; simp
        ¬∑ have := x.2.2
          simp [this, hb.le.trans this]
    specialize @ih S'
      (hfc‚ÇÇ ¬∑ ¬∑ |>.mono hS'_sub) hS'‚ÇÅ hS'_n
      (hfc‚ÇÅ ¬∑ <| hS'_sub ¬∑) (hfq‚ÇÇ ¬∑ ¬∑ |>.subset hS'_sub hS'‚ÇÇ)
      (hfq‚ÇÅ ¬∑ <| hS'_sub ¬∑) hS'‚ÇÇ
      (h_bddA.mono <| Set.image2_subset_right hS'_sub)
      (h_bddB.mono <| Set.image2_subset_right hS'_sub) ht ha'
    clear ha'
    obtain ‚ü®y‚ÇÄ', hy‚ÇÄ'‚ü© := ih
    refine (sion_exists_min_2 hfc‚ÇÇ hS‚ÇÅ hS‚ÇÉ hfc‚ÇÅ hfq‚ÇÇ hfq‚ÇÅ
      hT‚ÇÇ y‚ÇÄ' y‚Çô y‚ÇÄ'.2 hy‚Çô a ?_)
    by_cases hS'eq : S' = S
    ¬∑ rw [hS'eq] at hy‚ÇÄ'
      apply hy‚ÇÄ'.trans_le
      gcongr
      ¬∑ --BddBelow (Set.range fun x : S => f (‚Üëx) y‚ÇÄ')
        convert (hfc‚ÇÇ y‚ÇÄ' y‚ÇÄ'.2).bddBelow hS‚ÇÅ
        ext; simp
      exact le_sup_left
    have hS_diff_ne : (S \ S').Nonempty :=
      Set.nonempty_of_ssubset (hS'_sub.ssubset_of_ne hS'eq)
    apply Set.Nonempty.to_subtype at hS_diff_ne

    have h_non_inter : Nonempty ‚Üë(S ‚à© S') := by
      rwa [Set.inter_eq_self_of_subset_right hS'_sub]
    rw [ciInf_eq_min_cInf_inter_diff (f := fun x ‚Ü¶ max (f x y‚ÇÄ') (f x y‚Çô)) S S']; swap
    ¬∑ --BddAbove ((fun x => max (f x y‚ÇÄ') (f x y‚Çô)) '' S)
      apply h_bddB.mono
      rintro _ ‚ü®x, hx, rfl‚ü©
      use x, hx
      -- TODO: On a newer mathlib this line is just `grind`
      rcases max_cases (f x ‚Üëy‚ÇÄ') (f x y‚Çô) <;> grind
    clear h_non_inter
    rw [lt_inf_iff]
    constructor
    ¬∑ rw [Set.inter_eq_self_of_subset_right hS'_sub]
      apply hy‚ÇÄ'.trans_le
      gcongr
      ¬∑ --BddBelow (Set.range fun x : S' => f (‚Üëx) y‚ÇÄ')
        apply h_bddB.mono
        rintro _ ‚ü®x, rfl‚ü©
        use x, hS'_sub x.2, y‚ÇÄ', y‚ÇÄ'.2
      exact le_sup_left
    ¬∑ have hS'_compl : S \ S' = { z | z ‚àà S ‚àß b < f z y‚Çô } := by
        ext
        simp [S']
      rw [hS'_compl] at hS_diff_ne ‚ä¢
      rw [Set.coe_setOf] at hS_diff_ne
      refine hab.trans_le ?_
      simp
      apply le_ciInf
      intro x
      have := x.2.2.le
      exact le_sup_of_le_right this

include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ hT‚ÇÉ in
/-- **Sion's Minimax theorem**. Because of `ciSup` and `ciInf` junk values when f isn't
bounded, we need to assume that it's bounded above and below. -/
theorem sion_minimax
  (h_bddA : BddAbove (Set.image2 f S T))
  (h_bddB : BddBelow (Set.image2 f S T))
    : ‚®Ö x : S, ‚®Ü y : T, f x y = ‚®Ü y : T, ‚®Ö x : S, f x y := by
  have _ := hS‚ÇÅ.isClosed
  have _ := hS‚ÇÉ.to_subtype
  have _ := hT‚ÇÉ.to_subtype
  have h_bdd_0 (i : T) : BddBelow (Set.range fun j : S ‚Ü¶ f j i) := by
    --This one actually doesn't require h_bddB, we can just prove it from compactness + semicontinuity
    convert (hfc‚ÇÇ i i.2).bddBelow hS‚ÇÅ
    ext; simp
  have h_bdd_1 (j : S) : BddAbove (Set.range fun (x : T) => f j x) :=
    h_bddA.mono (T.range_restrict (f j) ‚ñ∏ Set.image_subset_image2_right j.coe_prop)
  have h_bdd_2 : BddAbove (Set.range fun y : T ‚Ü¶ ‚®Ö x : S, f x y) :=
    h_bddA.range_inf_of_image2 h_bddB
  have h_bdd_3 : BddBelow (Set.range fun x : S ‚Ü¶ ‚®Ü y : T, f x y) :=
    BddBelow.range_sup_of_image2 (f := flip f) (by simpa) (by simpa)
  apply le_antisymm; swap
  ¬∑ exact ciSup_ciInf_le_ciInf_ciSup _ h_bdd_1 h_bdd_0
  by_contra! h
  obtain ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© := exists_between h; clear h
  obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := exists_between ha‚ÇÇ; clear ha‚ÇÇ
  revert ha‚ÇÅ
  rw [imp_false, not_lt]
  have := hS‚ÇÅ.elim_finite_subfamily_closed (fun (y : T) ‚Ü¶ { x | x ‚àà S ‚àß f x y ‚â§ b}) ?_ ?_
  ¬∑ rcases this with ‚ü®u, hu‚ü©
    have hu' : u.Nonempty := by
      grind [Finset.not_nonempty_iff_eq_empty, Set.iInter_univ,
        Set.inter_univ, Set.not_nonempty_empty]
    have hau : a < ‚®Ö x : S, ‚®Ü yi : u.map ‚ü®_, Subtype.val_injective‚ü©, f ‚Üëx ‚Üëyi := by
      simp +contextual only [Set.iInter_coe_set, Set.ext_iff, Set.mem_inter_iff, Set.mem_iInter,
        Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false, not_and, true_and, not_forall,
        not_le] at hu
      rw [lt_ciInf_iff]; swap
      ¬∑ --BddBelow (Set.range fun x => ‚®Ü yi : Finset.map ‚ãØ, f ‚Üëx ‚Üëyi)
        exact BddBelow.range_sup_of_image2 (T := S) (S := u.map ‚ü®_, Subtype.val_injective‚ü©)
          (f := flip f) (by apply h_bddA.mono; simp [flip]; grind) (by apply h_bddB.mono; simp [flip]; grind)
      use b, hb‚ÇÅ
      intro i
      specialize hu i i.2
      rcases hu with ‚ü®c, hc‚ÇÅ, hc‚ÇÇ, hc‚ÇÉ‚ü©
      refine le_ciSup_of_le ?_ ‚ü®c, by simpa using ‚ü®hc‚ÇÅ, hc‚ÇÇ‚ü©‚ü© hc‚ÇÉ.le
      --BddAbove (Set.range fun yi : Finset.map ‚ãØ => f ‚Üëi ‚Üëyi)
      apply h_bddA.mono
      simp [Set.range, Set.image2]; grind
    obtain ‚ü®y‚ÇÄ, hy‚ÇÄ‚ü© := sion_exists_min_fin hfc‚ÇÇ hS‚ÇÅ hS‚ÇÉ hfc‚ÇÅ hfq‚ÇÇ hfq‚ÇÅ hT‚ÇÇ hS‚ÇÇ
      h_bddA h_bddB (u.map ‚ü®_, Subtype.val_injective‚ü©) (by simpa) (by simp) a hau
    exact hy‚ÇÄ.le.trans (le_ciSup h_bdd_2 y‚ÇÄ)
  ¬∑ intro i
    specialize hfc‚ÇÇ i i.2
    rw [lowerSemicontinuousOn_iff_isClosed_preimage] at hfc‚ÇÇ
    exact hfc‚ÇÇ b
  ¬∑ convert Set.inter_empty _
    by_contra hu
    simp? [Set.iInter_eq_empty_iff] says simp only [
      Set.iInter_coe_set, Set.iInter_eq_empty_iff, Set.mem_iInter, Set.mem_setOf_eq,
      Classical.not_imp, not_and, not_le, not_forall, not_exists, not_lt] at hu
    obtain ‚ü®x, hx‚ü© := hu
    apply hb‚ÇÇ.not_ge
    apply (ciInf_le h_bdd_3 ‚ü®x, hx _ hT‚ÇÉ.some_mem |>.1‚ü©).trans _
    apply ciSup_le (hx _ ¬∑.2 |>.2)
