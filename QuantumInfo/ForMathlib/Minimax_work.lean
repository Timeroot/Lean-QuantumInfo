import HarmonicLean

open scoped BigOperators
open scoped Real
open scoped Nat
open scoped Classical
open scoped Pointwise

set_option maxHeartbeats 800000
set_option maxRecDepth 4000
set_option synthInstance.maxHeartbeats 20000
set_option synthInstance.maxSize 128

set_option pp.fullNames true
set_option pp.structureInstances true

set_option relaxedAutoImplicit false
set_option autoImplicit false

set_option pp.coercions.types true
set_option pp.funBinderTypes true
set_option pp.letVarTypes true
set_option pp.piBinderTypes true

/-- The max-min theorem. A version of `iSup_iInf_le_iInf_iSup` for conditionally complete lattices. -/
theorem ciSup_ciInf_le_ciInf_ciSup {Œπ Œπ' Œ± : Type*} [ConditionallyCompleteLattice Œ± ] [Nonempty Œπ]
  (f : Œπ ‚Üí Œπ' ‚Üí Œ±) (Ha : ‚àÄ j, BddAbove (Set.range (f ¬∑ j))) (Hb : ‚àÄ i, BddBelow (Set.range (f i))) :
    ‚®Ü i, ‚®Ö j, f i j ‚â§ ‚®Ö j, ‚®Ü i, f i j :=
  ciSup_le fun i ‚Ü¶ ciInf_mono (Hb i) fun j ‚Ü¶ le_ciSup (Ha j) i

theorem lt_ciInf_iff {Œ± : Type*} {Œπ : Sort*} [Nonempty Œπ] [ConditionallyCompleteLattice Œ±] {f : Œπ ‚Üí Œ±} {a : Œ±}
    (hf : BddBelow (Set.range f)) :
    a < iInf f ‚Üî ‚àÉ b, a < b ‚àß ‚àÄ (i : Œπ), b ‚â§ f i := by
  apply Iff.intro;
  ¬∑ intro a_1
    exact ‚ü® iInf f, a_1, fun i => ciInf_le hf i ‚ü©;
  ¬∑ intro h
    obtain ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü© := h
    have h_inf : b ‚â§ iInf f := by
      exact le_ciInf hb‚ÇÇ;
    exact lt_of_lt_of_le hb‚ÇÅ h_inf

/-- The minimax theorem. For convex, compact, nonempty sets `S` and `T` in a pair of real
topological vector spaces `M` and `N`, and a bilinear function `f` on `M` and `N`, we can exchange
the order of minimizing and maximizing. -/
theorem bilin_minimax
  {M : Type*} [NormedAddCommGroup M] [Module ‚Ñù M] [ContinuousAdd M] [ContinuousSMul ‚Ñù M] [FiniteDimensional ‚Ñù M]
  {N : Type*} [NormedAddCommGroup N] [Module ‚Ñù N] [ContinuousAdd N] [ContinuousSMul ‚Ñù N] [FiniteDimensional ‚Ñù N]
  (f : M ‚Üí‚Çó[‚Ñù] N ‚Üí‚Çó[‚Ñù] ‚Ñù) (S : Set M) (T : Set N) (hS‚ÇÅ : IsCompact S) (hT‚ÇÅ : IsCompact T)
  (hS‚ÇÇ : Convex ‚Ñù S) (hT‚ÇÇ : Convex ‚Ñù T) (hS‚ÇÉ : S.Nonempty) (hT‚ÇÉ : T.Nonempty)
    : ‚®Ü x : S, ‚®Ö y : T, f x y = ‚®Ö y : T, ‚®Ü x : S, f x y := by
  have := hS‚ÇÉ.coe_sort
  have := hT‚ÇÉ.coe_sort
  have : CompactSpace S := isCompact_iff_compactSpace.mp hS‚ÇÅ
  have : CompactSpace T := isCompact_iff_compactSpace.mp hT‚ÇÅ
  apply le_antisymm
  ¬∑ --The easy direction, also called the "min-max theorem".
    apply ciSup_ciInf_le_ciInf_ciSup
    ¬∑ intro
      rw [‚Üê Set.image_univ]
      apply IsCompact.bddAbove_image CompactSpace.isCompact_univ
      simp_rw [‚Üê LinearMap.flip_apply (f)]
      fun_prop
    ¬∑ intro
      rw [‚Üê Set.image_univ]
      apply IsCompact.bddBelow_image CompactSpace.isCompact_univ
      fun_prop
  sorry

--Currently in Mathlib, backporting this proof
theorem lowerSemicontinuousOn_iff_isClosed_epigraph
  {Œ± Œ≥ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ≥] [TopologicalSpace Œ≥] [ClosedIciTopology Œ≥]
  {f : Œ± ‚Üí Œ≥} {s : Set Œ±} (hs : IsClosed s) :
    LowerSemicontinuousOn f s ‚Üî IsClosed {p : Œ± √ó Œ≥ | p.1 ‚àà s ‚àß f p.1 ‚â§ p.2} := by
  simp_rw [LowerSemicontinuousOn, LowerSemicontinuousWithinAt, eventually_nhdsWithin_iff,
    ‚Üê isOpen_compl_iff, Set.compl_setOf, isOpen_iff_eventually, Set.mem_setOf, not_and, not_le]
  constructor
  ¬∑ intro hf ‚ü®x, y‚ü© h
    by_cases hx : x ‚àà s
    ¬∑ have ‚ü®y', hy', z, hz, h‚ÇÅ‚ü© := (h hx).exists_disjoint_Iio_Ioi
      filter_upwards [(hf x hx z hz).prodMk_nhds (eventually_lt_nhds hy')]
        with _ ‚ü®h‚ÇÇ, h‚ÇÉ‚ü© h‚ÇÑ using h‚ÇÅ _ h‚ÇÉ _ <| h‚ÇÇ h‚ÇÑ
    ¬∑ filter_upwards [(continuous_fst.tendsto _).eventually (hs.isOpen_compl.eventually_mem hx)]
        with _ h‚ÇÅ h‚ÇÇ using (h‚ÇÅ h‚ÇÇ).elim
  ¬∑ intro hf x _ y hy
    exact ((Continuous.prodMk_left y).tendsto x).eventually (hf (x, y) (fun _ => hy))

theorem QuasiconvexOn.subset
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [LE Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconvexOn ùïú s f) {t : Set E} (hts : t ‚äÜ s) (ht : Convex ùïú t) :
    QuasiconvexOn ùïú t f := by
  intro b
  convert ht.inter (h b) using 1
  simp +contextual [Set.ext_iff, @hts _]

theorem QuasiconvexOn.mem_segment_le_max
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [SemilatticeSup Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconvexOn ùïú s f)
  {x y z : E} (hx : x ‚àà s) (hy : y ‚àà s) (hz : z ‚àà segment ùïú x y):
    f z ‚â§ f x ‚äî f y :=
  ((h (f x ‚äî f y)).segment_subset (by simpa) (by simpa) hz).right

theorem QuasiconcaveOn.min_le_mem_segment
  {ùïú E Œ≤ : Type*} [Semiring ùïú] [PartialOrder ùïú] [AddCommMonoid E] [SemilatticeInf Œ≤] [SMul ùïú E]
  {s : Set E} {f : E ‚Üí Œ≤} (h : QuasiconcaveOn ùïú s f)
  {x y z : E} (hx : x ‚àà s) (hy : y ‚àà s) (hz : z ‚àà segment ùïú x y):
    f x ‚äì f y ‚â§ f z :=
  ((h (f x ‚äì f y)).segment_subset (by simpa) (by simpa) hz).right

theorem LowerSemicontinuousOn.bddBelow {Œ± : Type*} [TopologicalSpace Œ±] {S : Set Œ±} {g : Œ± ‚Üí ‚Ñù}
    (hg : LowerSemicontinuousOn g S) (hS : IsCompact S) : BddBelow (g '' S) := by
  rcases S.eq_empty_or_nonempty with rfl | hS‚ÇÇ
  ¬∑ simp
  have h_neighborhood : ‚àÄ x ‚àà S, ‚àÉ U ‚àà nhds x, ‚àÄ y ‚àà U ‚à© S, g y > g x - 1 := by
    -- By definition of lower semicontinuity, for each x ‚àà S, there exists a neighborhood U_x such that g(y) > g(x) - 1 for all y ‚àà U_x ‚à© S.
    intros x hx
    specialize hg x hx (g x - 1) (sub_one_lt (g x))
    rw [eventually_nhdsWithin_iff] at hg
    simp only [Set.mem_inter_iff, gt_iff_lt, and_imp]
    exact ‚ü®_, hg, fun y hy hyS ‚Ü¶ hy hyS‚ü©
  choose! U hU using h_neighborhood
  -- By the finite subcover property, there exists a finite subset t ‚äÜ S$ such that S ‚äÜ ‚ãÉ_{x ‚àà t} U_x$.
  obtain ‚ü®t, ht‚ü© : ‚àÉ t, (‚àÄ x ‚àà t, x ‚àà S) ‚àß S ‚äÜ ‚ãÉ x ‚àà t, U x :=
    hS.elim_nhds_subcover U fun x hx ‚Ü¶ hU x hx |>.1;
  -- Let $m$ be the minimum value of $g$ on the finite set $t$.
  obtain ‚ü®m, hm‚ü© : ‚àÉ m, ‚àÄ x ‚àà t, g x ‚â• m := by
    use Finset.min' (t.image g) ?_
    ¬∑ exact fun x hx ‚Ü¶ Finset.min'_le _ _ (t.mem_image_of_mem g hx)
    refine ‚ü®_, Finset.mem_image_of_mem g <| Classical.choose_spec <| Finset.nonempty_of_ne_empty ?_‚ü©
    rintro rfl
    simpa using ht.2 hS‚ÇÇ.some_mem
  use m - 1
  refine Set.forall_mem_image.mpr fun x hx ‚Ü¶ ?_
  rcases Set.mem_iUnion‚ÇÇ.mp (ht.2 hx) with ‚ü®y, hy, hy'‚ü©
  linarith [hm y hy, hU y (ht.1 y hy) |>.2 x ‚ü®hy', hx‚ü©]

theorem LowerSemicontinuousOn.max {Œ± : Type*} [TopologicalSpace Œ±] {S : Set Œ±} {f g : Œ± ‚Üí ‚Ñù}
    (hf : LowerSemicontinuousOn f S) (hg : LowerSemicontinuousOn g S) :
    LowerSemicontinuousOn (fun x ‚Ü¶ max (f x) (g x)) S := by
  convert lowerSemicontinuousOn_ciSup (s := S) (f := fun (i : Bool) x' ‚Ü¶ if i then f x' else g x') ?_ ?_
  ¬∑ rw [ciSup_eq_of_forall_le_of_forall_lt_exists_gt] <;> aesop
  ¬∑ simp
  ¬∑ simp [hf, hg]

variable {Œ± : Type*} [TopologicalSpace Œ±] {Œ≤ : Type*} [Preorder Œ≤] {f g : Œ± ‚Üí Œ≤} {x : Œ±}
  {s t : Set Œ±} {y z : Œ≤} {Œ≥ : Type*} [LinearOrder Œ≥]

theorem lowerSemicontinuousOn_iff_isClosed_preimage {f : Œ± ‚Üí Œ≥} [IsClosed s] :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ y, IsClosed (s ‚à© f ‚Åª¬π' Set.Iic y) := by
  constructor
  ¬∑ intro a y
    refine' isClosed_of_closure_subset fun x hx => _;
    rw [ mem_closure_iff ] at hx;
    contrapose! hx;
    cases' em ( x ‚àà s ) with hx' hx';
    ¬∑ simp only [Set.mem_inter_iff, hx', Set.mem_preimage, Set.mem_Iic, true_and, not_le] at hx
      have := a x hx';
      rcases mem_nhdsWithin.1 ( this y hx ) with ‚ü® o, ho, h ‚ü©;
      exact ‚ü® o, ho, h.1, Set.eq_empty_iff_forall_not_mem.2 fun z hz => h.2 ‚ü® hz.1, hz.2.1 ‚ü© |> not_le_of_gt <| Set.mem_Iic.1 hz.2.2 ‚ü©;
    ¬∑ exact ‚ü® s·∂ú, IsClosed.isOpen_compl, hx', by aesop ‚ü©;
  ¬∑ intro a x hx y hy
    have hx_not_in : x ‚àâ s ‚à© f ‚Åª¬π' Set.Iic y := by
      simp [hy]
    rw [ eventually_nhdsWithin_iff ]
    filter_upwards [ IsOpen.mem_nhds ( isOpen_compl_iff.2 ( a y ) ) hx_not_in ] with z hz hzs
    exact lt_of_not_ge fun h => hz ‚ü®hzs, h‚ü©

theorem segment.isConnected {E : Type u_1} [AddCommGroup E] [Module ‚Ñù E] [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul ‚Ñù E] (a b : E) :
    IsConnected (segment ‚Ñù a b) := by
  sorry --The below proof works in latest mathlib
  -- rw [‚Üê Path.range_segment a b]
  -- exact isConnected_range (Path.segment a b).continuous

section extracted

variable {M : Type*} [NormedAddCommGroup M] [Module ‚Ñù M] [ContinuousAdd M] [ContinuousSMul ‚Ñù M] [FiniteDimensional ‚Ñù M]
  {N : Type*} [NormedAddCommGroup N] [Module ‚Ñù N] [ContinuousAdd N] [ContinuousSMul ‚Ñù N] [FiniteDimensional ‚Ñù N]
  (f : M ‚Üí N ‚Üí ‚Ñù) (S : Set M) (T : Set N)
  (hfc‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí LowerSemicontinuousOn (f ¬∑ y) S)
  (hfq‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí QuasiconvexOn ‚Ñù S (f ¬∑ y))
  (hS‚ÇÅ : IsCompact S) (hS‚ÇÇ : Convex ‚Ñù S) (hT‚ÇÇ : Convex ‚Ñù T) (hS‚ÇÉ : S.Nonempty) (hT‚ÇÉ : T.Nonempty)

end extracted

section sion_minimax
--Following https://projecteuclid.org/journals/kodai-mathematical-journal/volume-11/issue-1/Elementary-proof-for-Sions-minimax-theorem/10.2996/kmj/1138038812.pdf

variable  {M : Type*} [NormedAddCommGroup M] [Module ‚Ñù M] [ContinuousAdd M] [ContinuousSMul ‚Ñù M] [FiniteDimensional ‚Ñù M]
  {N : Type*} [NormedAddCommGroup N] [Module ‚Ñù N] [ContinuousAdd N] [ContinuousSMul ‚Ñù N] [FiniteDimensional ‚Ñù N]
  (f : M ‚Üí N ‚Üí ‚Ñù) (S : Set M) (T : Set N)
  (hfc‚ÇÅ : ‚àÄ x, x ‚àà S ‚Üí UpperSemicontinuousOn (f x) T)
  (hfq‚ÇÅ : ‚àÄ x, x ‚àà S ‚Üí QuasiconcaveOn ‚Ñù T (f x))
  (hfc‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí LowerSemicontinuousOn (f ¬∑ y) S)
  (hfq‚ÇÇ : ‚àÄ y, y ‚àà T ‚Üí QuasiconvexOn ‚Ñù S (f ¬∑ y))
  (hS‚ÇÅ : IsCompact S)
  -- (hT‚ÇÅ : IsCompact T) -- --In principle we don't need hT‚ÇÅ.
  (hS‚ÇÇ : Convex ‚Ñù S) (hT‚ÇÇ : Convex ‚Ñù T) (hS‚ÇÉ : S.Nonempty) (hT‚ÇÉ : T.Nonempty)

include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ hT‚ÇÉ in
private lemma sion_exists_min_2 (y‚ÇÅ y‚ÇÇ : N) (hy‚ÇÅ : y‚ÇÅ ‚àà T) (hy‚ÇÇ : y‚ÇÇ ‚àà T)
    (a : ‚Ñù) (ha : a < ‚®Ö x : S, (max (f x y‚ÇÅ) (f x y‚ÇÇ)))
    : ‚àÉ y‚ÇÄ : N, y‚ÇÄ ‚àà T ‚àß a < ‚®Ö x : S, f x y‚ÇÄ := by
  by_contra! hc
  have _ := isCompact_iff_compactSpace.mp hS‚ÇÅ
  have _ := hS‚ÇÅ.isClosed
  obtain ‚ü®Œ≤, hŒ≤‚ÇÅ, hŒ≤‚ÇÇ‚ü© := exists_between ha
  let C : N ‚Üí Set M := fun z ‚Ü¶ { x ‚àà S | f x z ‚â§ a }
  let C' : N ‚Üí Set M := fun z ‚Ü¶ { x ‚àà S | f x z ‚â§ Œ≤ }
  let A := C' y‚ÇÅ
  let B := C' y‚ÇÇ
  have hC_subset_C' (z) : C z ‚äÜ C' z :=
    fun x hx ‚Ü¶ ‚ü®hx.1, hx.2.trans hŒ≤‚ÇÅ.le‚ü©
  have hC_nonempty (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : (C z).Nonempty := by
    sorry
  have hC_closed (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : IsClosed (C z) := by
    specialize hfc‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz)
    rw [lowerSemicontinuousOn_iff_isClosed_preimage] at hfc‚ÇÇ
    exact hfc‚ÇÇ a
  have hC'_nonempty (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : (C' z).Nonempty :=
    (hC_nonempty z hz).mono (hC_subset_C' z)
  have hC'_closed (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : IsClosed (C' z) := by
    specialize hfc‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz)
    rw [lowerSemicontinuousOn_iff_isClosed_preimage] at hfc‚ÇÇ
    exact hfc‚ÇÇ Œ≤
  have hA_nonempty : A.Nonempty := hC'_nonempty y‚ÇÅ (left_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hA_closed : IsClosed A := hC'_closed y‚ÇÅ (left_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hB_nonempty : B.Nonempty := hC'_nonempty y‚ÇÇ (right_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hB_closed : IsClosed B := hC'_closed y‚ÇÇ (right_mem_segment ‚Ñù y‚ÇÅ y‚ÇÇ)
  have hAB : A ‚à© B = ‚àÖ := by
    simp [A, B, C', Set.ext_iff]
    intro x hx hŒ≤y‚ÇÅ _
    by_contra! hŒ≤y‚ÇÇ
    have hŒ≤ := max_le hŒ≤y‚ÇÅ hŒ≤y‚ÇÇ
    revert hŒ≤
    rw [imp_false, not_le]
    refine lt_of_lt_of_le hŒ≤‚ÇÇ ?_
    have h := ((hfc‚ÇÇ y‚ÇÅ hy‚ÇÅ).max (hfc‚ÇÇ y‚ÇÇ hy‚ÇÇ)).bddBelow hS‚ÇÅ
    rw [Set.image_eq_range] at h
    exact ciInf_le h ‚ü®x, hx‚ü©
  have hfxz (x) (hx : x ‚àà S) (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : min (f x y‚ÇÅ) (f x y‚ÇÇ) ‚â§ f x z :=
    (hfq‚ÇÅ x hx).min_le_mem_segment hy‚ÇÅ hy‚ÇÇ hz
  have hC'zAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : C' z ‚äÜ A ‚à™ B := by
    intro t
    simp only [A, B, C', Set.mem_setOf_eq, Set.mem_union, and_imp]
    intro ht hftz
    replace hfxz := (hfxz t ht z hz).trans hftz
    simp only [ht, true_and]
    exact inf_le_iff.mp hfxz
  have hC'z (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : Convex ‚Ñù (C' z) :=
    hfq‚ÇÇ z (hT‚ÇÇ.segment_subset hy‚ÇÅ hy‚ÇÇ hz) Œ≤
  have hCzAB (z) (hz : z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ) : C z ‚äÜ A ‚à® C z ‚äÜ B := by
    sorry
  let I : Set N := { z | z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ ‚àß C z ‚äÜ A}
  let J : Set N := { z | z ‚àà segment ‚Ñù y‚ÇÅ y‚ÇÇ ‚àß C z ‚äÜ B}
  have hIJ : I ‚à© J = ‚àÖ := by
    simp [I, J, Set.ext_iff]
    intro z hz hCzA _ hCzB
    specialize hCzA (hC_nonempty z hz).some_mem
    specialize hCzB (hC_nonempty z hz).some_mem
    rw [‚Üê Set.disjoint_iff_inter_eq_empty, Set.disjoint_left] at hAB
    tauto
  have hIJ‚ÇÇ : I ‚à™ J = segment ‚Ñù y‚ÇÅ y‚ÇÇ := by
    simp [I, J, Set.ext_iff]
    intro z
    specialize hCzAB z
    tauto
  have hI : IsClosed I := by
    sorry
  have hJ : IsClosed J := by
    sorry
  have hConnected := segment.isConnected y‚ÇÅ y‚ÇÇ
  rw [IsConnected, isPreconnected_iff_subset_of_fully_disjoint_closed (by sorry)] at hConnected
  replace hConnected := hConnected.right I J
  simp [hIJ, ‚Üê hIJ‚ÇÇ, Set.disjoint_iff_inter_eq_empty] at hConnected
  replace hConnected := hConnected hI hJ
  sorry

include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ hT‚ÇÉ in
private lemma sion_exists_min_fin (ys : Finset N) (hys_n : ys.Nonempty) (hys : (ys : Set N) ‚äÜ T)
    (a : ‚Ñù) (ha : a < ‚®Ö x : S, ‚®Ü yi : ys, f x yi)
    : ‚àÉ y‚ÇÄ : N, y‚ÇÄ ‚àà T ‚àß a < ‚®Ö x : S, f x y‚ÇÄ := by
  induction hys_n using Finset.Nonempty.cons_induction generalizing S
  case singleton x =>
    simp at ha hys
    use x
  case cons y‚Çô t hxt htn ih =>
    classical rw [Finset.cons_eq_insert] at hys ha
    simp [Set.insert_subset_iff] at hys
    rcases hys with ‚ü®hy‚Çô, ht‚ü©
    let S' := {z : M | z ‚àà S ‚àß f z y‚Çô ‚â§ a}
    have hS'_sub : S' ‚äÜ S := Set.sep_subset ..
    rcases S'.eq_empty_or_nonempty with hS'_e | hS'_n
    ¬∑ simp [S'] at hS'_e
      use y‚Çô, hy‚Çô
      --should be immediate from hS'_e
      sorry

    -- have _ := hS‚ÇÉ.coe_sort
    -- rw [lt_ciInf_iff ?_] at ha; swap
    -- ¬∑ sorry
    -- rcases ha with ‚ü®b, hab, hb‚ü©
    -- have ha := fun i ‚Ü¶ lt_of_lt_of_le hab (hb i)
    -- clear b hab hb

    have hS'‚ÇÅ : IsCompact S' := by
      apply hS‚ÇÅ.of_isClosed_subset ?_ hS'_sub
      specialize hfc‚ÇÇ y‚Çô
      rw [lowerSemicontinuousOn_iff_isClosed_epigraph hS‚ÇÅ.isClosed] at hfc‚ÇÇ
      have ha_closed : IsClosed {p : M √ó ‚Ñù | p.2 = a} := by
        convert isClosed_univ.prod (isClosed_singleton (x := a))
        simp [Set.ext_iff]
      suffices Continuous (fun (z : M) ‚Ü¶ (z, a) : M ‚Üí M √ó ‚Ñù) by
        convert ((hfc‚ÇÇ sorry).inter ha_closed).preimage this
        simp [S']
      fun_prop
    have hS'‚ÇÇ : Convex ‚Ñù S' := hfq‚ÇÇ _ hy‚Çô _
    specialize ih S' (fun y ‚Ü¶ (hfc‚ÇÇ y sorry).mono hS'_sub) (fun y ‚Ü¶ (hfq‚ÇÇ y).subset hS'_sub hS'‚ÇÇ)
      hS'‚ÇÅ hS'‚ÇÇ hS'_n ht ?_
    ¬∑ sorry
    obtain ‚ü®y‚ÇÄ', hy‚ÇÄ'_mem, hy‚ÇÄ'‚ü© := ih
    apply sion_exists_min_2 f S T hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ hT‚ÇÉ
      y‚ÇÄ' y‚Çô hy‚ÇÄ'_mem hy‚Çô a
    sorry


include hfc‚ÇÅ hfq‚ÇÅ hfc‚ÇÇ hfq‚ÇÇ hS‚ÇÅ hS‚ÇÇ hT‚ÇÇ hS‚ÇÉ hT‚ÇÉ in
theorem sion_minimax
    : ‚®Ö x : S, ‚®Ü y : T, f x y = ‚®Ü y : T, ‚®Ö x : S, f x y := by
  sorry
