/-
Copyright (c) 2025 Alex Meiburg. All rights reserved.
Released under MIT license as described in the file LICENSE.
Authors: Alex Meiburg
-/
import Mathlib.Analysis.Matrix

/- We want to have `HermitianMat.trace` give ùïú when ùïú is already a TrivialStar field, but give the "clean" type
otherwise -- for instance, ‚Ñù when the input field is ‚ÑÇ. This typeclass lets us do so. -/
class IsMaximalSelfAdjoint (R : outParam Type*) (Œ± : Type*) [Star Œ±] [Star R] [CommSemiring R]
    [Semiring Œ±] [TrivialStar R] [Algebra R Œ±] where
  selfadjMap : Œ± ‚Üí+ R
  selfadj_smul : ‚àÄ (r : R) (a : Œ±), selfadjMap (r ‚Ä¢ a) = r * (selfadjMap a)
  selfadj_algebra : ‚àÄ {a : Œ±}, IsSelfAdjoint a ‚Üí algebraMap _ _ (selfadjMap a) = a

/-- Every `TrivialStar` `CommSemiring` is its own maximal self adjoints. -/
instance instTrivialStar_IsMaximalSelfAdjoint {R} [Star R] [TrivialStar R] [CommSemiring R] : IsMaximalSelfAdjoint R R where
  selfadjMap := AddMonoidHom.id R
  selfadj_smul _ __ := rfl
  selfadj_algebra {_} _ := rfl

/-- ‚Ñù is the maximal self adjoint elements over RCLike -/
instance instRCLike_IsMaximalSelfAdjoint {Œ±} [RCLike Œ±] : IsMaximalSelfAdjoint ‚Ñù Œ± where
  selfadjMap := RCLike.re
  selfadj_smul := RCLike.smul_re
  selfadj_algebra := RCLike.conj_eq_iff_re.mp

namespace IsMaximalSelfAdjoint

-- In particular instances we care about, simplify selfadjMap should it appear.
-- It _seems_ like `selfadjMap 1 = 1`, always, but I can't find a proof. But these lemmas
-- take care of proving that anyway.

@[simp]
theorem trivial_selfadjMap {R} [Star R] [TrivialStar R] [CommSemiring R] : (selfadjMap : R ‚Üí+ R) = .id R := by
  rfl

@[simp]
theorem RCLike_selfadjMap {Œ±} [RCLike Œ±] : (selfadjMap : Œ± ‚Üí+ ‚Ñù) = RCLike.re := by
  rfl

end IsMaximalSelfAdjoint
